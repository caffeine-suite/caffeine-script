information_for_contributors:
  [] "This file has been adapted from https://github.com/microsoft/vscode/blob/master/extensions/coffeescript/syntaxes/coffeescript.tmLanguage.json"

version:   :0.1.0
name:      :CaffeineScript
scopeName: :source.caffeine
patterns:
  []
    #############################
    # Auto-Require
    {}
      match: '&(?!\\d)((?:(?!\\s)[-/$\\w\\u007f-\\uffff])+)'
      name: :string.quoted.other.caffeine

    #############################
      STRINGs
    #############################
    # word-string
    {}
      match:  ':(?!:)[^\\n\\s,;{}()\\[\\]]+'
      name:   :string.quoted.double.caffeine

    # hash-string
    {}
      match:  '#(?!#)[^\\n\\s,;{}()\\[\\]]+'
      name:   :string.quoted.double.caffeine

    # block-string
    {}
      begin:  "" (?:^( *))"""?[^\\n]*\\n
      end:    "" ^(?!\\1 +[^ ])(?= *[^ \\n])
      name:   :string.quoted.double.caffeine

    # to-eol-string
    {}
      begin:  "" ""
      end:    "" (?:\n)
      name:   :string.quoted.double.caffeine

    {}
      begin:  "" "(?!")
      end:    "" "
      name:   :string.quoted.double.caffeine

    {}
      begin:  "" '
      end:    "" '
      name:   :string.quoted.double.caffeine

    #############################
    # Numbers
    {}
      match:  '([-+]?(?!00)[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?|0b[01]+|0o[0-7]+|0x[0-9a-f]+)(?![$\\w\\u007f-\\uffff])(?!\\.[0-9])'
      name:   :constant.numeric.caffeine

    #############################
      REGEXP
    #############################
    # regexp
    {}
      match: '/[^/\\s]([^\\\\/]|\\\\.)*/[igmuy]*'
      name: :string.regexp.caffeine

    # block regexp
    {}
      match: '///[igmuy]?( |(?:\\n|$)) *[^\\n]*'
      name: :string.regexp.caffeine

    #############################
    # macro
    {}
      match: '<[\\w\\u007f-\\uffff]+>'
      name: :keyword.macro.compileTime.caffeine

    #############################
    # object-literal property names:
    {}
      match: '((?!\\s)[-~!@\\#$%^&*_+=|\\\\<>?/.$\\w\\u007f-\\uffff])+(?:\\:)'
      name: :variable.other.property.caffeine

    #############################
      KEYWORDS
    #############################
    {}
      match:
        ""
          (?x)
          \\b
          (
            super
            | delete | as
            | extract | import
            | instanceof | is

            | return | break

            | throw | try | catch
            | if | unless | then | else
            | switch
            | and | or | isnt | not
            | while | until

            | new | class | extends

            | (( in | from ) - )? ( array | object )
            | reduce | inject | find | each
            | into | returning
            | to | til | by | in | from
            | with | do | with-key
            | short | skip
            | when

            | await | yield
            | case
          )
          \\b
      name: :keyword.caffeine

    {}
      match: '\\b(false|true)\\b'
      name: :constant.language.boolean.caffeine

    {}
      match: '\\b(NaN|global|null|undefined)\\b'
      name: :constant.language.caffeine

    #############################
      OPERATORS
    #############################
    {}
      match: '[-+=!%&*|<>?]|==|&&|\\|\\|'
      name: :keyword.operator.caffeine

    # Function Declaration
    {}
      match: '[-=~]>'
      name: :storage.type.function.caffeine

    {}
      match: '[()\\[\\]{}]'
      name: :meta.brace.caffeine

    # dot
    {}
      match: '\\.'
      name: :punctuation.accessor.caffeine

    #############################
      IDENTIFIERS
    #############################
    # identifier
    {}
      match: '(?!\\d)[\\w\\u007f-\\uffff]+'
      name: :entity.identifier.caffeine

    # this-member: @foo
    {}
      match: '\\@(?!\\d)((?:(?!\\s)[$\\w\\u007f-\\uffff])+)?'
      name: :variable.other.member.caffeine

    # dot property access
    {}
      match: '\\.[\w\u007f-\uffff]+'
      name: :punctuation.accessor.caffeine

    #############################
      COMMENTS
    #############################
    # to-eol-comment
    {}
      match: "" #([\\x00-\\x20\\x7f\\s;,()\\[\\]{}\\\\]|$)([^\\n]*|(?=\\n|$))
      name: :comment.line.caffeine

    # block-comment
    {}
      begin: "" (?:^( *))##
      name: :comment.block.caffeine
      end: "" ^(?!\\1 +[^ ])(?= *[^ \\n])


##
    {}
      match: "(new)\\s+(?:(?:(class)\\s+(\\w+(?:\\.\\w*)*)?)|(\\w+(?:\\.\\w*)*))"
      name:  :meta.class.instance.constructor.caffeine
      captures:
        1: name: :keyword.operator.new.caffeine
        2: name: :storage.type.class.caffeine
        3: name: :entity.name.type.instance.caffeine
        4: name: :entity.name.type.instance.caffeine

    {}
      begin:         "'''"
      beginCaptures: 0: name: :punctuation.definition.string.begin.caffeine
      end:           "'''"
      endCaptures:   0: name: :punctuation.definition.string.end.caffeine
      name:          :string.quoted.single.heredoc.caffeine
      patterns:
        []
          captures: 1: name: :punctuation.definition.escape.backslash.caffeine
          match:    "(\\\\)."
          name:     :constant.character.escape.backslash.caffeine

    {}
      begin:         '"""'
      beginCaptures: 0: name: :punctuation.definition.string.begin.caffeine
      end:           '"""'
      endCaptures:   0: name: :punctuation.definition.string.end.caffeine
      name:          :string.quoted.double.heredoc.caffeine
      patterns:
        []
          {}
            captures: 1: name: :punctuation.definition.escape.backslash.caffeine
            match:    "(\\\\)."
            name:     :constant.character.escape.backslash.caffeine

          {} include: :#interpolated_coffee

    {}
      match: "(`)(.*)(`)"
      name:  :string.quoted.script.caffeine
      captures:
        1: name: :punctuation.definition.string.begin.caffeine
        2:
          name:     :source.js.embedded.caffeine
          patterns: [] include: :source.js

        3: name: :punctuation.definition.string.end.caffeine

    {}
      begin:         "(?<!#)###(?!#)"
      beginCaptures: 0:        name:                     :punctuation.definition.comment.caffeine
      end:           :###
      endCaptures:   0:        name:                     :punctuation.definition.comment.caffeine
      name:          :comment.block.caffeine
      patterns:      [] match: "(?<=^|\\s)@\\w*(?=\\s)", name: :storage.type.annotation.caffeine

    {}
      begin:         :#
      beginCaptures: 0: name: :punctuation.definition.comment.caffeine
      end:           :$
      name:          :comment.line.number-sign.caffeine

    {}
      begin:         :///
      end:           "(///)[gimuy]*"
      name:          :string.regexp.multiline.caffeine
      beginCaptures: 0:          name: :punctuation.definition.string.begin.caffeine
      endCaptures:   1:          name: :punctuation.definition.string.end.caffeine
      patterns:      [] include: :#heregexp

    {}
      begin:         "(?<![\\w$])(/)(?=(?![/*+?])(.+)(/)[gimuy]*(?!\\s*[\\w$/(]))"
      beginCaptures: 1:          name: :punctuation.definition.string.begin.caffeine
      end:           "(/)[gimuy]*(?!\\s*[\\w$/(])"
      endCaptures:   1:          name: :punctuation.definition.string.end.caffeine
      name:          :string.regexp.caffeine
      patterns:      [] include: :source.js.regexp

    {}
      match:
        "\\b(?<![\\.\\$])(break|by|catch|continue|else|finally|for|in|of|if|return|switch|then|throw|try|unless|when|while|until|loop|do|export|import|default|from|as|yield|async|await|(?<=for)\\s+own)(?!\\s*:)\\b"

      name: :keyword.control.caffeine

    {} match: "\\b(?<![\\.\\$])(delete|instanceof|new|typeof)(?!\\s*:)\\b", name: :keyword.operator.$1.caffeine
    {}
      match:
        "\\b(?<![\\.\\$])(case|function|var|void|with|const|let|enum|native|__hasProp|__extends|__slice|__bind|__indexOf|implements|interface|package|private|protected|public|static)(?!\\s*:)\\b"

      name: :keyword.reserved.caffeine

    {}
      begin:
        """
          (?x)
          (?<=\\s|^)((@)?[a-zA-Z_$][\\w$]*)
          \\s*([:=])\\s*
          (?=(\\([^\\(\\)]*\\)\\s*)?[=-]>)

      beginCaptures:
        1: name: :entity.name.function.caffeine
        2: name: :variable.other.readwrite.instance.caffeine
        3: name: :keyword.operator.assignment.caffeine

      end:         "[=-]>"
      endCaptures: 0:          name: :storage.type.function.caffeine
      name:        :meta.function.caffeine
      patterns:    [] include: :#function_params

    {}
      begin:
        """
          (?x)
          (?<=\\s|^)(?:((')([^']*?)('))|((")([^"]*?)(")))
          \\s*([:=])\\s*
          (?=(\\([^\\(\\)]*\\)\\s*)?[=-]>)

      beginCaptures:
        1: name: :string.quoted.single.caffeine
        2: name: :punctuation.definition.string.begin.caffeine
        3: name: :entity.name.function.caffeine
        4: name: :punctuation.definition.string.end.caffeine
        5: name: :string.quoted.double.caffeine
        6: name: :punctuation.definition.string.begin.caffeine
        7: name: :entity.name.function.caffeine
        8: name: :punctuation.definition.string.end.caffeine
        9: name: :keyword.operator.assignment.caffeine

      end:         "[=-]>"
      endCaptures: 0:          name: :storage.type.function.caffeine
      name:        :meta.function.caffeine
      patterns:    [] include: :#function_params

    {}
      begin:       "(?=(\\([^\\(\\)]*\\)\\s*)?[=-]>)"
      end:         "[=-]>"
      endCaptures: 0:          name: :storage.type.function.caffeine
      name:        :meta.function.inline.caffeine
      patterns:    [] include: :#function_params

    {}
      begin:         '(?<=\\s|^)({)(?=[^\'"#]+?}[\\s\\]}]*=)'
      beginCaptures: 1: name: :punctuation.definition.destructuring.begin.bracket.curly.caffeine
      end:           "}"
      endCaptures:   0: name: :punctuation.definition.destructuring.end.bracket.curly.caffeine
      name:          :meta.variable.assignment.destructured.object.caffeine
      patterns:
        []
          {} include: :$self
          {} match:   "[a-zA-Z$_]\\w*", name: :variable.assignment.caffeine

    {}
      begin:         '(?<=\\s|^)(\\[)(?=[^\'"#]+?\\][\\s\\]}]*=)'
      beginCaptures: 1: name: :punctuation.definition.destructuring.begin.bracket.square.caffeine
      end:           "\\]"
      endCaptures:   0: name: :punctuation.definition.destructuring.end.bracket.square.caffeine
      name:          :meta.variable.assignment.destructured.array.caffeine
      patterns:
        []
          {} include: :$self
          {} match:   "[a-zA-Z$_]\\w*", name: :variable.assignment.caffeine

    {} match: "\\b(?<!\\.|::)(true|on|yes)(?!\\s*[:=][^=])\\b",                   name: :constant.language.boolean.true.caffeine
    {} match: "\\b(?<!\\.|::)(false|off|no)(?!\\s*[:=][^=])\\b",                  name: :constant.language.boolean.false.caffeine
    {} match: "\\b(?<!\\.|::)null(?!\\s*[:=][^=])\\b",                            name: :constant.language.null.caffeine
    {} match: "\\b(?<!\\.|::)extends(?!\\s*[:=])\\b",                             name: :variable.language.caffeine
    {} match: "(?<!\\.)\\b(?<!\\$)(super|this|arguments)(?!\\s*[:=][^=]|\\$)\\b", name: :variable.language.$1.caffeine
    {}
      captures:
        1: name: :storage.type.class.caffeine
        2: name: :keyword.control.inheritance.caffeine
        3: name: :entity.other.inherited-class.caffeine

      match: "(?<=\\s|^|\\[|\\()(class)\\s+(extends)\\s+(@?[a-zA-Z\\$\\._][\\w\\.]*)"
      name:  :meta.class.caffeine

    {}
      captures:
        1: name: :storage.type.class.caffeine
        2: name: :entity.name.type.class.caffeine
        3: name: :keyword.control.inheritance.caffeine
        4: name: :entity.other.inherited-class.caffeine

      match: "(?<=\\s|^|\\[|\\()(class\\b)\\s+(@?[a-zA-Z\\$_][\\w\\.]*)?(?:\\s+(extends)\\s+(@?[a-zA-Z\\$\\._][\\w\\.]*))?"
      name:  :meta.class.caffeine

    {} match: "\\b(debugger|\\\\)\\b", name: :keyword.other.caffeine
    {}
      match:
        "\\b(Array|ArrayBuffer|Blob|Boolean|Date|document|Function|Int(8|16|32|64)Array|Math|Map|Number|Object|Proxy|RegExp|Set|String|WeakMap|window|Uint(8|16|32|64)Array|XMLHttpRequest)\\b"

      name: :support.class.caffeine

    {} match: "\\b(console)\\b",                                                     name: :entity.name.type.object.caffeine
    {} match: "((?<=console\\.)(debug|warn|info|log|error|time|timeEnd|assert))\\b", name: :support.function.console.caffeine
    {}
      match:
        "((?<=\\.)(apply|call|concat|every|filter|forEach|from|hasOwnProperty|indexOf|isPrototypeOf|join|lastIndexOf|map|of|pop|propertyIsEnumerable|push|reduce(Right)?|reverse|shift|slice|some|sort|splice|to(Locale)?String|unshift|valueOf))\\b"

      name: :support.function.method.array.caffeine

    {} match: "((?<=Array\\.)(isArray))\\b", name: :support.function.static.array.caffeine
    {}
      match:
        "((?<=Object\\.)(create|definePropert(ies|y)|freeze|getOwnProperty(Descriptors?|Names)|getProperty(Descriptor|Names)|getPrototypeOf|is(Extensible|Frozen|Sealed)?|isnt|keys|preventExtensions|seal))\\b"

      name: :support.function.static.object.caffeine

    {}
      match:
        "((?<=Math\\.)(abs|acos|acosh|asin|asinh|atan|atan2|atanh|ceil|cos|cosh|exp|expm1|floor|hypot|log|log10|log1p|log2|max|min|pow|random|round|sign|sin|sinh|sqrt|tan|tanh|trunc))\\b"

      name: :support.function.static.math.caffeine

    {} match:   "((?<=Number\\.)(is(Finite|Integer|NaN)|toInteger))\\b", name: :support.function.static.number.caffeine
    {} match:   "(?<!\\.)\\b(module|exports|__filename|__dirname|global|process)(?!\\s*:)\\b",name: :support.variable.caffeine
    {} match:   "\\b(Infinity|NaN|undefined)\\b",                        name: :constant.language.caffeine
    {} include: :#operators
    {} include: :#method_calls
    {} include: :#function_calls
    {} include: :#numbers
    {} include: :#objects
    {} include: :#properties
    # {} match:   "::",                                                    name: :keyword.operator.prototype.caffeine
    {} match:   "(?<!\\$)\\b[0-9]+[\\w$]*",                              name: :invalid.illegal.identifier.caffeine
    {} match:   ";",                                                     name: :punctuation.terminator.statement.caffeine
    {} match:   ",",                                                     name: :punctuation.separator.delimiter.caffeine
    {}
      begin:         "{"
      beginCaptures: 0:          name: :meta.brace.curly.caffeine
      end:           "}"
      endCaptures:   0:          name: :meta.brace.curly.caffeine
      patterns:      [] include: :$self

    {}
      begin:         "\\["
      beginCaptures: 0: name: :punctuation.definition.array.begin.bracket.square.caffeine
      end:           "\\]"
      endCaptures:   0: name: :punctuation.definition.array.end.bracket.square.caffeine
      patterns:
        []
          {} match:   "(?<!\\.)\\.{3}", name: :keyword.operator.slice.exclusive.caffeine
          {} match:   "(?<!\\.)\\.{2}", name: :keyword.operator.slice.inclusive.caffeine
          {} include: :$self

    {}
      begin:         "\\("
      beginCaptures: 0:          name: :meta.brace.round.caffeine
      end:           "\\)"
      endCaptures:   0:          name: :meta.brace.round.caffeine
      patterns:      [] include: :$self

    {} include: :#instance_variable
    {} include: :#single_quoted_string
    {} include: :#double_quoted_string

repository: {}
##
  arguments:
    patterns:
      []
        {}
          begin:         "\\("
          beginCaptures: 0:          name: :punctuation.definition.arguments.begin.bracket.round.caffeine
          end:           "\\)"
          endCaptures:   0:          name: :punctuation.definition.arguments.end.bracket.round.caffeine
          name:          :meta.arguments.caffeine
          patterns:      [] include: :$self

        {}
          begin:    '(?=(@|@?[\\w$]+|[=-]>|\\-\\d|\\[|{|"|\'))'
          end:      "(?=\\s*(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))|(?=\\s*(}|\\]|\\)|#|$))"
          name:     :meta.arguments.caffeine
          patterns: [] include: :$self

  double_quoted_string:
    patterns:
      []
        begin:         '"'
        beginCaptures: 0: name: :punctuation.definition.string.begin.caffeine
        end:           '"'
        endCaptures:   0: name: :punctuation.definition.string.end.caffeine
        name:          :string.quoted.double.caffeine
        patterns:
          []
            {}
              captures: 1: name: :punctuation.definition.escape.backslash.caffeine
              match:    "(\\\\)(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)"
              name:     :constant.character.escape.backslash.caffeine

            {} include: :#interpolated_coffee

  function_calls:
    patterns:
      []
        {}
          begin: "(@)?([\\w$]+)(?=\\()"
          beginCaptures:
            1: name:     :variable.other.readwrite.instance.caffeine
            2: patterns: [] include: :#function_names

          end:      "(?<=\\))"
          name:     :meta.function-call.caffeine
          patterns: [] include: :#arguments

        {}
          begin:
            """
              (?x)
              (@)?([\\w$]+)
              \\s*
              (?=\\s+(?!(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))(?=(@?[\\w$]+|[=-]>|\\-\\d|\\[|{|"|')))

          beginCaptures:
            1: name:     :variable.other.readwrite.instance.caffeine
            2: patterns: [] include: :#function_names

          end:      "(?=\\s*(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))|(?=\\s*(}|\\]|\\)|#|$))"
          name:     :meta.function-call.caffeine
          patterns: [] include: :#arguments

  function_names:
    patterns:
      []
        {}
          match:
            """
              (?x)
              \\b(isNaN|isFinite|eval|uneval|parseInt|parseFloat|decodeURI|
              decodeURIComponent|encodeURI|encodeURIComponent|escape|unescape|
              require|set(Interval|Timeout)|clear(Interval|Timeout))\\b

          name: :support.function.caffeine

        {} match: "[a-zA-Z_$][\\w$]*", name: :entity.name.function.caffeine
        {} match: "\\d[\\w$]*",        name: :invalid.illegal.identifier.caffeine

  function_params:
    patterns:
      []
        begin:         "\\("
        beginCaptures: 0: name: :punctuation.definition.parameters.begin.bracket.round.caffeine
        end:           "\\)"
        endCaptures:   0: name: :punctuation.definition.parameters.end.bracket.round.caffeine
        name:          :meta.parameters.caffeine
        patterns:
          []
            {}
              match: "([a-zA-Z_$][\\w$]*)(\\.\\.\\.)?"
              captures:
                1: name: :variable.parameter.function.caffeine
                2: name: :keyword.operator.splat.caffeine

            {}
              match: "(@(?:[a-zA-Z_$][\\w$]*)?)(\\.\\.\\.)?"
              captures:
                1: name: :variable.parameter.function.readwrite.instance.caffeine
                2: name: :keyword.operator.splat.caffeine

            {} include: :$self

  ## embedded_comment:
    patterns:
      []
        captures: 1: name: :punctuation.definition.comment.caffeine
        match:    "(?<!\\\\)(#).*$\\n?"
        name:     :comment.line.number-sign.caffeine

  instance_variable: patterns: [] match: "(@)([a-zA-Z_\\$]\\w*)?", name: :variable.other.readwrite.instance.caffeine
  ## interpolated_coffee:
    patterns:
      []
        begin:    "\\#\\{"
        captures: 0:          name: :punctuation.section.embedded.caffeine
        end:      "\\}"
        name:     :source.caffeine.embedded.source
        patterns: [] include: :$self

  method_calls:
    patterns:
      []
        {}
          begin: "(?:(\\.)|(::))\\s*([\\w$]+)\\s*(?=\\()"
          beginCaptures:
            1: name:     :punctuation.separator.method.period.caffeine
            2: name:     :keyword.operator.prototype.caffeine
            3: patterns: [] include: :#method_names

          end:      "(?<=\\))"
          name:     :meta.method-call.caffeine
          patterns: [] include: :#arguments

        {}
          begin:
            '(?:(\\.)|(::))\\s*([\\w$]+)\\s*(?=\\s+(?!(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))(?=(@|@?[\\w$]+|[=-]>|\\-\\d|\\[|{|"|\')))'

          beginCaptures:
            1: name:     :punctuation.separator.method.period.caffeine
            2: name:     :keyword.operator.prototype.caffeine
            3: patterns: [] include: :#method_names

          end:      "(?=\\s*(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))|(?=\\s*(}|\\]|\\)|#|$))"
          name:     :meta.method-call.caffeine
          patterns: [] include: :#arguments

  method_names:
    patterns:
      []
        ##{}
          match:
            """
              (?x)
              \\bon(Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|
              Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|
              Before(cut|deactivate|unload|update|paste|print|editfocus|activate)|
              Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|
              Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|
              Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|
              Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|
              Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)\\b

          name: :support.function.event-handler.caffeine

        ##{}
          match:
            """
              (?x)
              \\b(shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|
              scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|
              sup|sub|substr|substring|splice|split|send|set(Milliseconds|Seconds|Minutes|Hours|
              Month|Year|FullYear|Date|UTC(Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|
              Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|
              savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|
              contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|
              createEventObject|to(GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|
              test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|
              untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|
              print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|
              fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|
              forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|
              abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|
              releaseCapture|releaseEvents|go|get(Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|
              Time|Date|TimezoneOffset|UTC(Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|
              Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|
              moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back)\\b

          name: :support.function.caffeine

        ##{}
          match:
            """
              (?x)
              \\b(acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|
              appendChild|appendData|before|blur|canPlayType|captureStream|
              caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|
              cloneContents|cloneNode|cloneRange|close|closest|collapse|
              compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|
              convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|
              createAttributeNS|createCaption|createCDATASection|createComment|
              createContextualFragment|createDocument|createDocumentFragment|
              createDocumentType|createElement|createElementNS|createEntityReference|
              createEvent|createExpression|createHTMLDocument|createNodeIterator|
              createNSResolver|createProcessingInstruction|createRange|createShadowRoot|
              createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|
              deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|
              deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|
              enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|
              exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|
              getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|
              getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|
              getClientRects|getContext|getDestinationInsertionPoints|getElementById|
              getElementsByClassName|getElementsByName|getElementsByTagName|
              getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|
              getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|
              hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|
              insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|
              insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|
              isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|
              lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|
              moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|
              parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|
              previousSibling|probablySupportsContext|queryCommandEnabled|
              queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|
              querySelector|querySelectorAll|registerContentHandler|registerElement|
              registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|
              removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|
              removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|
              requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|
              scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|
              setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|
              setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|
              setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|
              slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|
              submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|
              toDataURL|toggle|toString|values|write|writeln)\\b

          name: :support.function.dom.caffeine

        {} match: "[a-zA-Z_$][\\w$]*", name: :entity.name.function.caffeine
        {} match: "\\d[\\w$]*",        name: :invalid.illegal.identifier.caffeine

  numbers:
    patterns:
      []
        {} match: "\\b(?<!\\$)0(x|X)[0-9a-fA-F]+\\b(?!\\$)", name: :constant.numeric.hex.caffeine
        {} match: "\\b(?<!\\$)0(b|B)[01]+\\b(?!\\$)",        name: :constant.numeric.binary.caffeine
        {} match: "\\b(?<!\\$)0(o|O)?[0-7]+\\b(?!\\$)",      name: :constant.numeric.octal.caffeine
        {}
          match:
            """
              (?x)
              (?<!\\$)(?:
                (?:\\b[0-9]+(\\.)[0-9]+[eE][+-]?[0-9]+\\b)| # 1.1E+3
                (?:\\b[0-9]+(\\.)[eE][+-]?[0-9]+\\b)|       # 1.E+3
                (?:\\B(\\.)[0-9]+[eE][+-]?[0-9]+\\b)|       # .1E+3
                (?:\\b[0-9]+[eE][+-]?[0-9]+\\b)|            # 1E+3
                (?:\\b[0-9]+(\\.)[0-9]+\\b)|                # 1.1
                (?:\\b[0-9]+(?=\\.{2,3}))|                  # 1 followed by a slice
                (?:\\b[0-9]+(\\.)\\B)|                      # 1.
                (?:\\B(\\.)[0-9]+\\b)|                      # .1
                (?:\\b[0-9]+\\b(?!\\.))                     # 1
              )(?!\\$)

          captures:
            0: name: :constant.numeric.decimal.caffeine
            1: name: :punctuation.separator.decimal.period.caffeine
            2: name: :punctuation.separator.decimal.period.caffeine
            3: name: :punctuation.separator.decimal.period.caffeine
            4: name: :punctuation.separator.decimal.period.caffeine
            5: name: :punctuation.separator.decimal.period.caffeine
            6: name: :punctuation.separator.decimal.period.caffeine

  objects:
    patterns:
      []
        {} match: "[A-Z][A-Z0-9_$]*(?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))",  name: :constant.other.object.caffeine
        {} match: "[a-zA-Z_$][\\w$]*(?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))", name: :variable.other.object.caffeine

  operators:
    patterns:
      []
        {}
          match: "(?:([a-zA-Z$_][\\w$]*)?\\s+|(?<![\\w$]))(and=|or=)"
          captures:
            1: name: :variable.assignment.caffeine
            2: name: :keyword.operator.assignment.compound.caffeine

        {}
          match: "([a-zA-Z$_][\\w$]*)?\\s*(%=|\\+=|-=|\\*=|&&=|\\|\\|=|\\?=|(?<!\\()/=)"
          captures:
            1: name: :variable.assignment.caffeine
            2: name: :keyword.operator.assignment.compound.caffeine

        {}
          match: "([a-zA-Z$_][\\w$]*)?\\s*(&=|\\^=|<<=|>>=|>>>=|\\|=)"
          captures:
            1: name: :variable.assignment.caffeine
            2: name: :keyword.operator.assignment.compound.bitwise.caffeine

        {}
          match: :<<|>>>|>>
          name:  :keyword.operator.bitwise.shift.caffeine

        {}
          match: :!=|<=|>=|==|<|>
          name:  :keyword.operator.comparison.caffeine

        {} match: "&&|!|\\|\\|", name: :keyword.operator.logical.caffeine
        {} match: "&|\\||\\^|~", name: :keyword.operator.bitwise.caffeine
        {}
          match: "([a-zA-Z$_][\\w$]*)?\\s*(=|:(?!:))(?![>=])"
          captures:
            1: name: :variable.assignment.caffeine
            2: name: :keyword.operator.assignment.caffeine

        {}
          match: :--
          name:  :keyword.operator.decrement.caffeine

        {} match: "\\+\\+",        name: :keyword.operator.increment.caffeine
        {} match: "\\.\\.\\.",     name: :keyword.operator.splat.caffeine
        {} match: "\\?",           name: :keyword.operator.existential.caffeine
        {} match: "%|\\*|/|-|\\+", name: :keyword.operator.caffeine
        {}
          match:
            """
              (?x)
              \\b(?<![\\.\\$])
              (?:
                (and|or|not) # logical
                |
                (is|isnt) # comparison
              )
              (?!\\s*:)\\b

          captures:
            1: name: :keyword.operator.logical.caffeine
            2: name: :keyword.operator.comparison.caffeine

  properties:
    patterns:
      []
        {}
          match: "(?:(\\.)|(::))\\s*([A-Z][A-Z0-9_$]*\\b\\$*)(?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))"
          captures:
            1: name: :punctuation.separator.property.period.caffeine
            2: name: :keyword.operator.prototype.caffeine
            3: name: :constant.other.object.property.caffeine

        {}
          match: "(?:(\\.)|(::))\\s*(\\$*[a-zA-Z_$][\\w$]*)(?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))"
          captures:
            1: name: :punctuation.separator.property.period.caffeine
            2: name: :keyword.operator.prototype.caffeine
            3: name: :variable.other.object.property.caffeine

        {}
          match: "(?:(\\.)|(::))\\s*([A-Z][A-Z0-9_$]*\\b\\$*)"
          captures:
            1: name: :punctuation.separator.property.period.caffeine
            2: name: :keyword.operator.prototype.caffeine
            3: name: :constant.other.property.caffeine

        {}
          match: "(?:(\\.)|(::))\\s*(\\$*[a-zA-Z_$][\\w$]*)"
          captures:
            1: name: :punctuation.separator.property.period.caffeine
            2: name: :keyword.operator.prototype.caffeine
            3: name: :variable.other.property.caffeine

        {}
          match: "(?:(\\.)|(::))\\s*([0-9][\\w$]*)"
          captures:
            1: name: :punctuation.separator.property.period.caffeine
            2: name: :keyword.operator.prototype.caffeine
            3: name: :invalid.illegal.identifier.caffeine

  single_quoted_string:
    patterns:
      []
        begin:         "'"
        beginCaptures: 0: name: :punctuation.definition.string.begin.caffeine
        end:           "'"
        endCaptures:   0: name: :punctuation.definition.string.end.caffeine
        name:          :string.quoted.single.caffeine
        patterns:
          []
            captures: 1: name: :punctuation.definition.escape.backslash.caffeine
            match:    "(\\\\)(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)"
            name:     :constant.character.escape.backslash.caffeine

  regex-character-class:
    patterns:
      []
        {} match: "\\\\[wWsSdD]|\\.",                               name: :constant.character.character-class.regexp
        {} match: "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})", name: :constant.character.numeric.regexp
        {} match: "\\\\c[A-Z]",                                     name: :constant.character.control.regexp
        {} match: "\\\\.",                                          name: :constant.character.escape.backslash.regexp

  heregexp:
    patterns:
      []
        {} match: "\\\\[bB]|\\^|\\$",                             name: :keyword.control.anchor.regexp
        {} match: "\\\\[1-9]\\d*",                                name: :keyword.other.back-reference.regexp
        {} match: "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??", name: :keyword.operator.quantifier.regexp
        {} match: "\\|",                                          name: :keyword.operator.or.regexp
        {}
          begin: "(\\()((\\?=)|(\\?!))"
          beginCaptures:
            1: name: :punctuation.definition.group.regexp
            3: name: :meta.assertion.look-ahead.regexp
            4: name: :meta.assertion.negative-look-ahead.regexp

          end:         "(\\))"
          endCaptures: 1:          name: :punctuation.definition.group.regexp
          name:        :meta.group.assertion.regexp
          patterns:    [] include: :#heregexp

        {}
          begin:         "\\((\\?:)?"
          beginCaptures: 0:          name: :punctuation.definition.group.regexp
          end:           "\\)"
          endCaptures:   0:          name: :punctuation.definition.group.regexp
          name:          :meta.group.regexp
          patterns:      [] include: :#heregexp

        {}
          begin: "(\\[)(\\^)?"
          beginCaptures:
            1: name: :punctuation.definition.character-class.regexp
            2: name: :keyword.operator.negation.regexp

          end:         "(\\])"
          endCaptures: 1: name: :punctuation.definition.character-class.regexp
          name:        :constant.other.character-class.set.regexp
          patterns:
            []
              {}
                captures:
                  1: name: :constant.character.numeric.regexp
                  2: name: :constant.character.control.regexp
                  3: name: :constant.character.escape.backslash.regexp
                  4: name: :constant.character.numeric.regexp
                  5: name: :constant.character.control.regexp
                  6: name: :constant.character.escape.backslash.regexp

                match:
                  "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))"

                name: :constant.other.character-class.range.regexp

              {} include: :#regex-character-class

        {} include: :#regex-character-class
        # {} include: :#embedded_comment
        # {} include: :#interpolated_coffee
##
  jsx:
    patterns:
      []
        {} include: :#jsx-tag
        {} include: :#jsx-end-tag

  jsx-expression:
    begin:         "{"
    beginCaptures: 0: name: :meta.brace.curly.caffeine
    end:           "}"
    endCaptures:   0: name: :meta.brace.curly.caffeine
    patterns:
      []
        {} include: :#double_quoted_string
        {} include: :$self

  jsx-attribute:
    patterns:
      []
        {}
          captures:
            1: name: :entity.other.attribute-name.caffeine
            2: name: :keyword.operator.assignment.caffeine

          match: "(?:^|\\s+)([-\\w.]+)\\s*(=)"

        {} include: :#double_quoted_string
        {} include: :#single_quoted_string
        {} include: :#jsx-expression

  jsx-tag:
    patterns:
      []
        begin: "(<)([-\\w\\.]+)"
        beginCaptures:
          1: name: :punctuation.definition.tag.caffeine
          2: name: :entity.name.tag.caffeine

        end:      "(/?>)"
        name:     :meta.tag.caffeine
        patterns: [] include: :#jsx-attribute

  jsx-end-tag:
    patterns:
      []
        begin: "(</)([-\\w\\.]+)"
        beginCaptures:
          1: name: :punctuation.definition.tag.caffeine
          2: name: :entity.name.tag.caffeine

        end:  "(/?>)"
        name: :meta.tag.caffeine
