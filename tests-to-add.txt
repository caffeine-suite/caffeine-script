#################################
BIG PROBLEMS
#################################

Comment Preprocessing has to go:

  This:
    """
      abc
    ## comment

  Currently compiles to: "abc\n## comment"
  The comment should not be in the string.

  OH NOES!

  Also,
    """
      abc
        ## comment

  Currently compiles to: "abc\n## comment"
  The comment SHOULD be in the string, but it should have 2 spaces first.

  I tried just stripping comments in the preprocessor, but that breaks the
  second example above.

  The real solution looks like this: Every block sub-parsed, other than literals
  like string-blocks or comment-blocks themselves, needs something akin to the
  current preprocess step: Any under-indented comments should be up-indented to
  the base of the sub-block. I -think- that'll solve it.

#################################
SEMANTIC TODO
#################################

---------
a = 10
while a > 0
  b = a
  a--
---------
This should have "let a" outside the while, but should have "let b" inside, like
all the comprehensions.


#################################
SHOULD COMPILE
#################################

# I think the problem is the trailing comments
switch subject
  when :mailbox     then true   # the mailbox is unavailable
  when :mailSystem  then true   # the mail system is unvailable
  when :addressing  then true   # the address is bad (i.e. there is no mailbox)
  when :security    then false  # could just be that the server doesn't like our IP
  when :network     then false  # by definition, temporary failure, probably should never be a clientFailure
  when :protocol    then false  # means the server thinks WE broke protocol
  when :content     then false  # means the server doesn't like our content - since we weren't really sending any, something weird happend
  else false                    # something weird happened


-----

new class FakeSocket

-----
-> arguments.length

-----
  [].slice 0, 100

-----
  {@getPriority = defaultGetPriority, @array = []} = options

-----
  {
    a
    b
  } = myObject

  {
  a
  b
  } = myObject

  {}
    a
    b
  = myObject
-------
import &StandardImport

authorizedSync = (request) ->
  !!if Neptune.Art.Config.configName == "Production"
    request.session.userId in config.curators
  else
    present request.session.userId

----------
foo && (bar) => bar

#################################
SHOULD NOT COMPILE
#################################
-----
a = private: 1
{private} = a
console.log private

I need to test all assigns to ensure they aren't in &javaScriptReservedWords.
-----
  foo (a)->
    .bar

-----
  testUpdatesAfterBillsAndAlicesMessages = =>
    @testCreateBillsMessage()
    .then @testCreateAlicesMessage
    .then (message) =>
      .then @setup

-----
App extends FluxComponent


#################################
WRONG COMPILE
#################################
THIS: -a**2
SHOULD BE: -(a**2)
