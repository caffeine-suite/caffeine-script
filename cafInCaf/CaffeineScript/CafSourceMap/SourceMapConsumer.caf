import &ArtStandardLib, &ArtClassSystem, &CaffeineEight, &Base64

# https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit

class SourceMapConsumer extends BaseClass
  constructor: (sourceMap) ->
    if sourceMap is String
      sourceMap = JSON.parse sourceMap
    @sourceMap = sourceMap

  @getter
    mappings: -> @sourceMap.mappings
    sources:  -> @sourceMap.sources
    names:    -> @sourceMap.names
    inspectedObjects: ->
      {} @sourceMap, @decodedMappings
    decodedMappings: ->
      out = []
      while result = @readMapping @mappings, result
        out.push result.mapping if result.mapping
      out

  readMapping: (mappings = @mappings, result) ->
    {index} = result ?=
      index:            0
      generatedLine:    0
      generatedColumn:  0
      sourceLine:       0
      sourceColumn:     0
      source:           0
      sourceNameIndex:  0
      mapping:          null

    result.mapping = null
    if index < mappings.length
      switch mappings[index]
      when ";"
        result.index++
        result.generatedColumn = 0
        result.generatedLine++

      when ","
        result.index++

      else
        [genColDelta, srcDelta, srcLineDelta, srcColDelta, nameDelta] = readVlqSequence mappings, result
        throw new Error "invalid mapping at #{index}, char: #{mappings[index]}" unless genColDelta?
        m = result.mapping = {}
        m.generatedLine   = result.generatedLine
        m.generatedColumn = result.generatedColumn  += genColDelta
        m.source          = result.source           += srcDelta     if srcDelta?
        m.sourceLine      = result.sourceLine       += srcLineDelta if srcLineDelta?
        m.sourceColumn    = result.sourceColumn     += srcColDelta  if srcColDelta?
        m.sourceNameIndex = result.sourceNameIndex  += nameDelta    if nameDelta?

      result