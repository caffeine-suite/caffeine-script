import &ArtStandardLib, &ArtClassSystem, &CaffeineEight, &Base64

# https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit

class SourceMapGenerator extends BaseClass

  @property
    :source
    :sourceFileName
    :generatedFileName

  @getter
    :js
    :mappings
    :lastSourceLine
    :lastSourceColumn
    :lastGeneratedColumn
    :nextGeneratedColumn
    status: ->
      {}
        @lastSourceLine
        @lastSourceColumn
        @lastGeneratedColumn
        @nextGeneratedColumn
        @mappings

    sourceMap:    -> JSON.stringify @rawSourceMap
    rawSourceMap: ->
      merge {}
        version:  3
        file:     @generatedFileName
        sources:  [] @sourceFileName
        @mappings # Example: "" A,AAAB;;ABCDE;

        # not currently supported:
        #   sourceRoot:       ""
        #   sourcesContent":  [] "" ...
        #   names:            :src :maps :are :fun

    inspectedObjects: -> @rawSourceMap

  constructor: (@source, @sourceFileName, @generatedFileName) ->
    @_js = ""
    @_mappings = ""

    @_lastSourceLine =
    @_lastSourceColumn =
    @_lastGeneratedColumn =
    @_nextGeneratedColumn = 0
    @_firstSegment = true

    @_sourceLineColumnMap = new SourceLineColumnMap @source

  addLine: ->
    @_mappings += ";"
    @_lastGeneratedColumn = 0
    @_firstSegment = true

  reusableColLine = {}
  addSegment: (sourceIndex) ->
    if sourceIndex?
      {line, column} = @_sourceLineColumnMap.getLineColumn sourceIndex, reusableColLine
      log addSegment: {line, column, sourceIndex}

      out =
        encodeVlq @_nextGeneratedColumn - @_lastGeneratedColumn # generated column
        + :A                                                    # Sources, with only one source, always a VLQ-0
        + encodeVlq line                - @_lastSourceLine      # source line
        + encodeVlq column              - @_lastSourceColumn    # source column

      @_lastGeneratedColumn = @_nextGeneratedColumn
      @_lastSourceLine      = line
      @_lastSourceColumn    = column

      if @_firstSegment
        @_firstSegment = false
      else
        @_mappings += ","

      @_mappings += out

  advance: (generatedString) ->
    index = -1
    lineAdded = false
    while 0 <= index = generatedString.indexOf "\n", lastStartIndex = index + 1
      lineAdded = true
      @addLine()

    if lineAdded
      @_nextGeneratedColumn = generatedString.length - lastStartIndex
    else
      @_nextGeneratedColumn += generatedString.length

  add: (sourceIndex, output) ->
    switch
    when output is String
      @addSegment sourceIndex
      @_js += output
      @advance output

    when output?.children
      {sourceIndex, children} = output
      @add sourceIndex, children

    when output is Array
      each child in output
        @add sourceIndex, output

    @
