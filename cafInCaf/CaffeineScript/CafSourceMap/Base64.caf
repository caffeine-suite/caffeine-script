import &ArtStandardLib
##
  A single base 64 digit can contain 6 bits of data. For the base 64 variable
  length quantities we use in the source map spec, the first bit is the sign,
  the next four bits are the actual value, and the 6th bit is the
  continuation bit. The continuation bit tells us whether there are more
  digits in this value following this digit.

    Continuation
    |    Sign
    |    |
    V    V
    101011

  bit-0 signed integer examples:

    1  becomes 2 ( 10 binary)
    -1 becomes 3 ( 11 binary)
    2  becomes 4 (100 binary)
    -2 becomes 5 (101 binary)

{}
  vlqBaseShift = 5
  vlqBase = 1 << vlqBaseShift    # binary: 100000
  vlqBaseMask = vlqBase - 1      # binary: 011111
  vlqContinuationBit = vlqBase   # binary: 100000

  intToCharMap =
    "" ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
    .split ''

  charMapToInt = object v, k from intToCharMap
    k

  ##
    Encode an integer in the range of 0 to 63 to a single base 64 digit.
  getBase64char = (number) ->
    intToCharMap[number]

  ##
    IN:  normal signed integer
    OUT: bit-0 signed integer
  toVlqSigned = (value) ->
    if value < 0
      -value << 1
      + 1
    else
      value << 1

  ##
    IN:  bit-0 signed integer
    OUT: normal signed integer
  fromVlqSigned = (value) ->
    if value & 1
      0 -
        value >> 1
    else
      value >> 1

  ##
    IN:   signed integer
    OUT:  base 64 VLQ encoded value
  encodeVlq = (value) ->
    if value == 0
      :A

    else
      encoded = ""
      vlq = toVlqSigned value

      while vlq > 0
        digit = vlq & vlqBaseMask

        encoded += getBase64char if 0 < vlq >>>= vlqBaseShift
          digit | vlqContinuationBit
        else
          digit

      encoded

  ##
    IN:
      string: the whole source-string (probably, a sourcemap mappings string)
      index: the index to start reading from
      resultObject: an optional, reusable option to return the results in

    OUT:
      value:  signed integer, the VLQ value decoded
      index:  the first index after the last byte 'read'
      (note, this object is resultObject with the above fields updated)
  readVlq = (string, resultObject = index: 0) ->
    {index} = resultObject

    number = 0
    shiftAmount = 0

    if charMapToInt[string[index]]?

      while vlqContinuationBit & read = charMapToInt[string[index++]]
        number += (read & vlqBaseMask) << shiftAmount
        shiftAmount += vlqBaseShift

      resultObject.index = index
      resultObject.value = fromVlqSigned
        number
        + read << shiftAmount

      resultObject

  readVlqSequence = (string, resultObject = index: 0) ->
    out = []
    while result = readVlq string, resultObject
      out.push result.value
    out
