import &StandardImport

SemanticTree = &StnRegistry
UniqueIdentifierHandle = &UniqueIdentifierHandle

class ComprehensionStn extends &ScopeStnMixin &BaseStn

  ###
    TODO
    capture-loop-variables (CLV):
      Some circumstances require capturing the loop variables:

      - when-block assigns to any of the loop variables
        (and the with-block reads the one or more of those assigned variables)
        (or there is no with-block and the when-block assigns to the value-loop-variable)
        Basically, I think the first pass is: when-block-assigns-to-any-loop-variable.

      - there is already a same-named variable in the enclosing scope as one of the loop variables

      If we detect we should capture-loop-variables, we need to:

      - declare that we assign to the loop variables. This will create the correct lets, taking into
        account if any of the loop variables matches an enclosing-scope-variable.

      - capture all loop variables in the when-block, if present, otherwise in the with-block.
        If the when-block is present, then the with-block's arguments become empty - it just uses
        the captured values.

        - generate an unused variable name for each loop variable, perferrably similar to each, then:
        - (_value, _key, _into, _whenResult) => {value = _value; key = _key; into = _into; whenResult = _whenResult}
        - but only for the loop-variables declared.

      - Explicitly create the default with-block if only the when-block is present so that it can
        use the captured value-variable rather than the one passed to it by the iteration function.
        This covers the special case of the when-block assigning to the value-variable.

    TODO explicit iterationTypes:
      ExampleA: object v from array a
      ExampleB: object v from object a
      ExampleC: object v from iter a

      I really need to test if that has any practical performance gain.

      It would dramatically increase the size of the iteration library
      to take into account all those sub-options.

      Not sure it's worth it.

      My intention is to provide the standard javascript 'while' loop for performance - and
      for the ability to use returns and breaks. The only change is while returns a value,
        probably the value returned from the last execution of the body or undefined.

      If we do explicit iterationTypes, my intention is the lib names be:

      oFromA
      oFromO
      oFromI

      and so on for o, a, f, r, e >> 3x the functions

  validate: ->
    valueClauseChildren = {}
    each valueClause in @labeledChildren.valueClauses
      {type} = valueClause
      throw new Error "no more than one '#{type}' clause allowed" if valueClauseChildren[type]
      valueClauseChildren[type] = true

  postTransform: ->
    @initLabeledChildren()
    {outputType, variableDefinition, body, iterable} = @labeledChildren

    intoChild = whenClause = null
    each valueClause in @labeledChildren.valueClauses
      {type, value} = valueClause
      switch type
        when :into, :returning then intoChild = value
        when :when then whenClause = value

    outputType = outputType?.props.token
    iterationFunction = outputType.slice 0,1

    {AccessorStn, ArrayStn, AssignmentStn, BinaryOperatorStn, ControlOperatorStn,
    FunctionDefinitionArgsStn, FunctionDefinitionArgStn, FunctionDefinitionStn,
    FunctionInvocationStn, IdentifierStn, ObjectStn, SimpleLiteralStn, StatementsStn} = SemanticTree
    # variableDefinition ||= FunctionDefinitionArgsStn FunctionDefinitionArgStn IdentifierStn identifier: "v"


    ###
      EXAMPLES:
        # IN
        find v from o with v > 10

        # PSEUDO-OUT
        Caf.ee o, null, (v, k, out, brk) ->
          brk v if v > 10

        # IN
        object o

        # OUT
        Caf.e(o, {}, function(v, k, into) {
          return into[k] = v;
        });

    # These should actually be
    #  a) extracted from variableDefinition...
    #  b) and if not present, unused var-names generated

    useExtendedEach = switch outputType
      when "find" then true
      else false

    basicEach = outputType == "each"

    variableDefinition = FunctionDefinitionArgsStn
      valueVarDef = variableDefinition?.children[0] || !basicEach && FunctionDefinitionArgStn   IdentifierStn identifierHandle: new UniqueIdentifierHandle "v"    false
      keyVarDef   = variableDefinition?.children[1] || !basicEach && FunctionDefinitionArgStn   IdentifierStn identifierHandle: new UniqueIdentifierHandle "k"    false
      (useExtendedEach || !basicEach) &&               FunctionDefinitionArgStn intoIdentifer = IdentifierStn identifierHandle: new UniqueIdentifierHandle "into" false
      useExtendedEach &&                               FunctionDefinitionArgStn brkIdentifer  = IdentifierStn identifierHandle: new UniqueIdentifierHandle "brk"  false

    if outputType == "object" || outputType == "array"
      lastBodyStatement = if body
        if body.className == "StatementsStn"
          bodyStatementsExceptLast = arrayWithAllButLast body.children
          peek body.children
        else
          body
      else
        bodyStatementsExceptLast = null
        valueVarDef
    else
      bodyWithDefault = body || valueVarDef

    whenClauseWrapper = if whenClause
      (actionStn) ->
        ControlOperatorStn
          operand: "if"
          whenClause
          actionStn

    else
      (actionStn) -> actionStn

    FunctionInvocationStn
      IdentifierStn identifier: "Caf.#{if useExtendedEach then 'extendedEach' else 'each'}"
      iterable
      intoChild || switch outputType
      when "object" then ObjectStn()
      when "array" then ArrayStn()
      when "each" then SimpleLiteralStn value: "undefined"
      when "find" then SimpleLiteralStn value: "undefined"
      when "reduce" then null
      else throw new Error "not supported yet: #{outputType}"

      FunctionDefinitionStn
        bound: true
        returnIgnored: outputType != "find"
        variableDefinition

        switch outputType
          when "object"
            whenClauseWrapper StatementsStn
              bodyStatementsExceptLast
              AssignmentStn
                AccessorStn
                  intoIdentifer
                  keyVarDef
                lastBodyStatement

          when "array"
            whenClauseWrapper StatementsStn
              bodyStatementsExceptLast
              FunctionInvocationStn
                AccessorStn
                  intoIdentifer
                  IdentifierStn identifier: "push"
                lastBodyStatement

          when "each"
            whenClauseWrapper body

          when "find"
            if whenClause
              if body
                BinaryOperatorStn
                  operator: "&&"
                  whenClause

                  StatementsStn
                    FunctionInvocationStn brkIdentifer
                    body
              else
                BinaryOperatorStn
                  operator: "&&"
                  whenClause

                  StatementsStn
                    FunctionInvocationStn brkIdentifer

                    valueVarDef
            else
              if body

                if body.type == "Statements" && body.children.length > 1
                  allButLast = StatementsStn body.children.slice 0, body.children.length - 1
                  body = peek body.children

                foundTest = if body.type == "Reference"
                  BinaryOperatorStn
                    operator: "&&"
                    body

                    StatementsStn
                      FunctionInvocationStn brkIdentifer
                      body

                else
                  BinaryOperatorStn
                    operator: "&&"

                    AssignmentStn
                      IdentifierStn identifierHandle: baseIdentifierHandle = new UniqueIdentifierHandle "_ret"
                      body

                    StatementsStn
                      FunctionInvocationStn brkIdentifer

                      IdentifierStn identifierHandle: baseIdentifierHandle

                if allButLast
                  StatementsStn allButLast, foundTest
                else
                  foundTest

              else
                BinaryOperatorStn
                  operator: "&&"
                  valueVarDef

                  StatementsStn
                    FunctionInvocationStn brkIdentifer

                    valueVarDef
