import &StandardImport
SemanticTree = &StnRegistry

##
  ObjectStn
    ObjectPropValueStn
      ObjectPropNameStn
        value:            "source"

    ObjectPropValueStn
      ObjectPropNameStn:
        - value:            "value"
        - str.IdentiferStn: identifier: "value"

      - propValue.ReferenceStn: - identifier.IdentiferStn: identifier: "foo"

class ExtractStn extends &BaseStn

  transform: (extractSourceFromParent)->
    {StatementsStn, AssignmentStn, AccessorStn, IdentifierStn} = SemanticTree
    {extractSource, extractActions} = @labeledChildren
    extractSource = extractSourceFromParent ? extractSource
    StatementsStn
      array child, i in extractActions
        if child is ExtractStn
          []
            AssignmentStn
              uniqueIdentifier = IdentifierStn()
              child.labeledChildren.extractSource.getTransformedExtractionStns extractSource
            child.transform uniqueIdentifier

        else
          AssignmentStn
            child.assignToIdentifierStn
            child.getTransformedExtractionStns extractSource
