import &StandardImport

class ComprehensionStn extends &ScopeStnMixin &BaseStn

  ###
    TODO explicit iterationTypes:
      ExampleA: object v from-array a
      ExampleB: object v from-object a
      ExampleC: object v from-iter a

      UPDATE 2018-5-4:
        Currently, chrome is full-speed with closureless functions,
        but if there is a closure, even if there is no escape, there is a 7x
        speed penaltiy: https://jsbench.me/1nj5v4npva

        Safari is much worse - it's a 30x difference between using
        an existing function vs a newly created one, no matter
        the structure of the funciton.

        FireFox: no-closure is fast, but w-closure is 60x slower!

        However, all three ARE full-speed with an external function vs
        inlining.

        All of which means, elliminating function creation is still a big
        win.

      My plan is to actually make inline loops for explicit from-type iteration.

  getComprehensionsFound = (labeledClauses) ->
    "" (clauses found: #{(array clause in labeledClauses when clause with clause.clauseType).join ', '})

  validate: ->
    {valueClauses, variableDefinition} = @labeledChildren
    if variableDefinition?.children.length > 2
      throw new Error "Can define at most two loop variables (value followed optionally by key). You defined: #{variableDefinition.parseTreeNode?.toString()}."

    {comprehensionType} = @

    {toClause, byClause, tilClause, fromClause, fromArrayClause, fromObjectClause, withKeyClause} = @labeledClauses

    if fromArrayClause
      switch comprehensionType
        when :array, :object, :each, :find then null
        else throw new Error "" Invalid Comprehension: The 'from-array' clause is only compatible with 'array' or 'object' comprehensions #{getComprehensionsFound @labeledClauses}

    if withKeyClause && comprehensionType != :object
      throw new Error "" Invalid Comprehension: The 'with-key' clause is only compatbile with 'object' comprehensions #{getComprehensionsFound @labeledClauses}

    # if (toClause || byClause || tilClause) && (comprehensionType != :array && comprehensionType != :each)
    #   throw new Error "" Invalid Comprehension: 'from-array', 'to', 'by' and 'til' clauses not supported for '#{comprehensionType}' comprehensions #{getComprehensionsFound @labeledClauses}

    sourceCounts = 0
    sourceCounts++ if fromClause || toClause || tilClause
    sourceCounts++ if fromArrayClause
    sourceCounts++ if fromObjectClause
    unless sourceCounts == 1
      throw new Error "" Invalid Comprehension: Exactly one 'from/to/til', 'from-array' or 'from-object' clause expected #{getComprehensionsFound @labeledClauses}

    if toClause && tilClause
      throw new Error "" Invalid Comprehension: only one 'to' or 'til' clause allowed  #{getComprehensionsFound @labeledClauses}

    if byClause && !(tilClause || toClause)
      throw new Error "" Invalid Comprehension: 'to' or 'til' clauses required when using a 'by' clause.  #{getComprehensionsFound @labeledClauses}

  clauseAliases =
    returning:  :into
    in:         :from
    do:         :with

  @getter
    comprehensionType: -> @labeledChildren.outputType.props.token

    labeledClauses: ->
      {iterable, body} = @labeledChildren
      labeledClauses = {}

      each {type, value} in @labeledChildren.valueClauses
        type = clauseAliases[type] ? type
        name = lowerCamelCase type + :Clause
        if labeledClauses[name]
          throw new Error "" no more than one '#{type}' clause allowed
        value.clauseType = type
        labeledClauses[name] = value

      labeledClauses.fromClause ?= iterable
      labeledClauses.withClause ?= body

      labeledClauses

  postTransform: ->
    @initLabeledChildren()

    {labeledClauses, comprehensionType} = @

    if labeledClauses.fromArrayClause || labeledClauses.fromObjectClause || labeledClauses.toClause || labeledClauses.tilClause
      @generateInlineIteration comprehensionType, labeledClauses
    # else if labeledClauses.toClause || labeledClauses.tilClause
    #   @generateArrayRange comprehensionType, labeledClauses
    else
      switch comprehensionType
      when :each, :array, :object
        @generateArrayOrEach
          if comprehensionType == :each then :each2 else comprehensionType
          labeledClauses

      when :find
        @generateFind
          labeledClauses

  resolveStnParams: (params...) ->
    {variableDefinition} = @labeledChildren

    lastNonNulIndex = 0
    params = array p, i in params
      p = switch
      when p is Object
        {f} = p
        if f
          FunctionDefinitionStn
            bound: true
            variableDefinition
            f
      when p is String
        SimpleLiteralStn value: p

      else p

      lastNonNulIndex = i if p?
      p

    Null = null
    params = params.slice 0, lastNonNulIndex + 1
    array p in params
      p ? Null ?= SimpleLiteralStn value: :null

  generateInlineIteration: (comprehensionType, {fromArrayClause, fromClause, tilClause, toClause, byClause, fromObjectClause, intoClause, withClause, whenClause, withKeyClause})->
    {variableDefinition} = @labeledChildren
    variableDefinition = variableDefinition?.children

    if toClause || tilClause
      fromClause ?= NumberLiteralStn value: :0
      toClauseEquality = if tilClause
        toClause = tilClause
        ""
      else
        "="

      byClauseCompileTimeValue = byClause?.compileTimeValue
      fromCompileTimeValue = fromClause.compileTimeValue
      toCompileTimeValue = toClause.compileTimeValue

      if fromCompileTimeValue? && toCompileTimeValue?
        unless byClause
          byClauseCompileTimeValue = switch
          when fromCompileTimeValue < toCompileTimeValue then 1
          when fromCompileTimeValue > toCompileTimeValue then -1
          else                                                0

      if byClauseCompileTimeValue?
        switch
          when byClauseCompileTimeValue < 0 then byClauseIsNegative = true
          when byClauseCompileTimeValue > 0 then byClauseIsPositive = true
          when byClauseCompileTimeValue == 0 then byClauseIsZero = true
      else
        byId = IdentifierStn preferredIdentifier: :by

      toId = IdentifierStn preferredIdentifier: :to unless toCompileTimeValue?

    else
      fromId    = IdentifierStn preferredIdentifier: :from
      lengthId  = IdentifierStn preferredIdentifier: :length

    intoId      = IdentifierStn preferredIdentifier: :into unless comprehensionType == 'each' && toClause && !intoClause
    iId         = IdentifierStn preferredIdentifier: if fromObjectClause then :k else :i

    unless variableDefinition
      variableDefinition = [] IdentifierStn preferredIdentifier: :v, addToLets: false

    [valueId] = variableDefinition

    withClauseProvided = !!withClause
    returnNullIfFalse = false

    withClause ?= valueId extract valueStn
    if fromObjectClause
      keyValueStn ?= iId.valueStn
      withKeyClause ?= keyValueStn


    intoId && intoClause = AssignmentStn intoId, intoClause ?
      switch comprehensionType
      when :object  then PureJsStn "{}"
      when :each    then fromId || toClause
      when :array   then PureJsStn "[]"
      else PureJsStn "null"

    invokeWithClauseAndPush = if comprehensionType == :each
      withClause

    else

      switch comprehensionType
      when :array
        FunctionInvocationStn
          AccessorStn intoId, IdentifierStn "push"
          withClause

      when :object
        AssignmentStn
          AccessorStn intoId, withKeyClause ? valueStn
          withClause

      when :find
        if whenClause || !withClauseProvided
          whenClause ?= withClause
          StatementsStn
            AssignmentStn
              intoId
              withClause

            PureJsStn :break
        else
          returnNullIfFalse = true
          IfStn
            AssignmentStn
              intoId
              withClause

            PureJsStn :break

      else throw new Error "comprehensionType: #{comprehensionType} not supported (yet?) with from-array clauses"


    loopStn = if fromObjectClause then ForStn else WhileStn
    StatementsStn
      fromId && AssignmentStn fromId, BinaryOperatorStn
        operator: "||"
        fromArrayClause ? fromObjectClause
        PureJsStn if fromObjectClause then "{}" else "[]"

      lengthId && AssignmentStn lengthId, toClause || AccessorStn fromId, IdentifierStn "length" unless fromObjectClause
      toId && AssignmentStn toId, toClause

      switch
        when fromArrayClause then AssignmentStn iId, NumberLiteralStn value: :0
        when toClause then AssignmentStn iId, fromClause ?= NumberLiteralStn value: :0

      # by = byClause || if fromValue < toValue then 1 else -1
      byId && AssignmentStn byId, byClause ||
        IfStn
          BinaryOperatorStn
            operator: "<"
            iId
            toId
          NumberLiteralStn value: :1
          NumberLiteralStn value: :-1

      intoClause

      !byClauseIsZero && loopStn
        if fromObjectClause
          ForInControlStn
            let: true
            keyValueStn ?= iId.valueStn
            fromId
        else if fromArrayClause
          BinaryOperatorStn
            operator: "<"
            iId
            lengthId
        else # to/til
          # (byValue >= 0 && v <= toValue) || (byValue < 0 && v >= toValue)
          positiveByTest = BinaryOperatorStn {operator: "<#{toClauseEquality}"}, iId, toId || NumberLiteralStn value: toCompileTimeValue
          negativeByTest = BinaryOperatorStn {operator: ">#{toClauseEquality}"}, iId, toId || NumberLiteralStn value: toCompileTimeValue

          switch
          when byClauseIsPositive then positiveByTest
          when byClauseIsNegative then negativeByTest
          else # unknown by-value
            BinaryOperatorStn
              operator: :||
              BinaryOperatorStn
                operator: :&&
                BinaryOperatorStn {operator: :>}, byId, NumberLiteralStn value: :0
                positiveByTest

              BinaryOperatorStn
                operator: :&&
                BinaryOperatorStn {operator: :<}, byId, NumberLiteralStn value: :0
                negativeByTest

        StatementsStn
          if variableDefinition?.length > 0
            LetStn
              if fromObjectClause
                AssignmentStn
                  valueId
                  AccessorStn
                    fromId
                    keyValueStn
              else
                array v, i in variableDefinition
                  AssignmentStn
                    v
                    if !toClause && i == 0 then AccessorStn fromId, iId.getValueStn()
                    else iId

          if whenClause
            IfStn whenClause, invokeWithClauseAndPush
          else
            invokeWithClauseAndPush

          unless fromObjectClause
            if byId || byClauseCompileTimeValue? && !floatEq 1, Math.abs byClauseCompileTimeValue
              AssignmentStn
                operator: :+
                iId
                byId || NumberLiteralStn value: byClauseCompileTimeValue
            else if byClauseCompileTimeValue < 0
              UnaryOperatorStn
                operand: :--
                tail: true
                iId
            else
              UnaryOperatorStn
                operand: :++
                tail: true
                iId

      if returnNullIfFalse
        BinaryOperatorStn
          operator: :||
          intoId
          PureJsStn :null
      else
        intoId || toId || NumberLiteralStn value: toCompileTimeValue


  # Caf.find(source, withClause, whenClause) ->
  generateFind: ({fromClause, withClause, whenClause})->
    {iterable, variableDefinition} = @labeledChildren

    FunctionInvocationStn
      IdentifierStn identifier: "" Caf.find

      @resolveStnParams
        fromClause
        {} f: withClause
        {} f: whenClause

  # Caf.array( source, withClause = returnFirst, whenClause = returnTrue, into = []) ->
  # Caf.object(source, withClause = returnFirst, whenClause = returnTrue, into = {}) ->
  # Caf.each2( source, withClause = returnFirst, whenClause = returnTrue, into)
  generateArrayOrEach: (method, {fromClause, intoClause, withClause, whenClause, withKeyClause})->
    {variableDefinition} = @labeledChildren

    # if the value-variable is defined, it's a destructuring set the special default withClause
    # Example: array {a}        # default: with {a}
    # Example: array extract a  # default: with a     - extract not impleneted as-of this writing
    if variableDefinition?.children?.length > 0 && !variableDefinition.children[0].isSimpleIdentifier
      withClause ?= StatementsStn variableDefinition.children[0]

    FunctionInvocationStn
      IdentifierStn identifier: "" Caf.#{method}

      @resolveStnParams
        fromClause
        {} f: withClause
        {} f: whenClause
        intoClause
        {} f: withKeyClause
