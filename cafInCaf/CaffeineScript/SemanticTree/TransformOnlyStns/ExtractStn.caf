import &StandardImport
SemanticTree = &StnRegistry

##
  ObjectStn
    ObjectPropValueStn
      ObjectPropNameStn
        value:            "source"

    ObjectPropValueStn
      ObjectPropNameStn:
        - value:            "value"
        - str.IdentiferStn: identifier: "value"

      - propValue.ReferenceStn: - identifier.IdentiferStn: identifier: "foo"

class ExtractStn extends &BaseStn

  transform: (extractSourceFromParent)->
    {StatementsStn, AssignmentStn, AccessorStn, IdentifierStn, FunctionInvocationStn, ControlOperatorStn} = SemanticTree
    {extractSource, extractActions} = @labeledChildren
    extractSource = extractSourceFromParent ? extractSource
    {conditional} = @props

    StatementsStn
      unless conditional || extractSource.type == :Reference || extractSource.type == :Identifier
        complexSource = extractSource
        AssignmentStn
          extractSource = IdentifierStn()
          complexSource

      if true
        doExtract = array child, i in extractActions
          if (extractChild = child) is ExtractStn
            []
              AssignmentStn
                uniqueIdentifier = IdentifierStn()
                extractChild.labeledChildren.extractSource.getTransformedExtractionStns extractSource
              extractChild.transform uniqueIdentifier

          else
            AssignmentStn
              child.assignToIdentifierStn
              child.getTransformedExtractionStns extractSource

        if conditional
          ControlOperatorStn
            FunctionInvocationStn
              IdentifierStn identifier: "Caf.exists"
              extractSource

            doExtract
        else
          doExtract