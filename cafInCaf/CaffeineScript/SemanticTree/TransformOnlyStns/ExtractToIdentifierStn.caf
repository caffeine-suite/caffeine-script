import &StandardImport

class ExtractToIdentifierStn extends &BaseStn

  @getter
    assignToIdentifierStn: ->
      @extractAs
      ? peek @extractPathExtensions
      ? @bastIdentifier

    extractAs:      -> @labeledChildren.extractAs
    extractDefault: -> @labeledChildren.extractDefault
    bastIdentifier: -> @labeledChildren.bastIdentifier

    extractPathExtensions: ->
      {extractPathExtensions, extractPathExtension} = @labeledChildren
      extractPathExtensions ? extractPathExtension && [extractPathExtension]

  getSourceValueStn: (extractSource) ->
    stn = AccessorStn
      extractSource
      @bastIdentifier

    if extensions = @extractPathExtensions
      each extension in extensions
        stn = AccessorStn
          stn
          extension
      stn
    else
      stn

  getTransformedExtractionStns: (extractSource)->
    if @extractDefault
      ControlOperatorStn
        BinaryOperatorStn
          UndefinedStn()
          operator: :!==
          AssignmentStn
            tempIdentifierStn = IdentifierStn()
            @getSourceValueStn extractSource
        tempIdentifierStn
        @extractDefault.transform()
    else
      @getSourceValueStn extractSource

  updateScope: (@scope) ->
    @scope.addIdentifierAssigned @children[0].identifier
    super
