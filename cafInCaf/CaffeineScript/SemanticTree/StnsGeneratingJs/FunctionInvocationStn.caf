import &StandardImport

SemanticTree = require './namespace'

class FunctionInvocationStn extends &AccessorChainStn

  constructor: (props, children) ->
    super
    [functionValue, argStns...] = children
    @key = @argStns = argStns
    @value = @functionValue = functionValue

    # collapse implicit arrays into parents
    if @argStns.length == 1 && @argStns[0].props.implicitArray
      @argStns = @argStns[0].children

    @props.existanceTest ||= true if @parseTreeNode?.conditional || @parseTreeNode?.existanceTest



  @getter
    existanceTest: -> @props.existanceTest
    isFunctionInvocation: -> true
    propName: -> @functionValue?.propName

  toSourceNode: (options)->
    {newObjectFunctionInvocation, noParens} = options if options

    throw new Error "internal error: can't be existanceTest here" if @existanceTest
    valueSourceNode = @functionValue.toSourceNode()

    if newObjectFunctionInvocation
      switch @functionValue.type
      when :Reference, :GlobalIdentifier, :This
        null
      else unless noParens
        valueSourceNode = []
          "("
          valueSourceNode
          ")"

    @createSourceNode
      valueSourceNode
      "("
      @stnArrayToSourceNodes @argStns, ', ', expression: true
      ")"
