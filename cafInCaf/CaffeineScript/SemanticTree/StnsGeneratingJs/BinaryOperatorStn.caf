import &StandardImport, &OperatorHelper

class BinaryOperatorStn extends &BaseStn

  constructor: (props, children) ->
    super
    @operator = props.operator # should be JavaScript operator (== willnot be comverted to ===)
    @left = children[0]
    @right = children[1]
    throw new Error "left and right required: #{formattedInspect left: @left, right: @right}" unless @left && @right

  updateScope: (@scope) ->
    if @operator == "?" && !@left.isReference
      @uniqueIdentifierHandle = @scope.uniqueIdentifierHandle
    super

  toSourceNode: (options)->
    commonSubToSourceNodeProps =
      expression: true
      isOperand: true

    out = switch
    when @operator == "?" && @uniqueIdentifierHandle
      {identifier} = @uniqueIdentifierHandle

      []
        "(("
        identifier
        " = "
        @left.toSourceNode  commonSubToSourceNodeProps
        ") != null ? "
        identifier
        " : "
        @right.toSourceNode commonSubToSourceNodeProps
        ")"

    when !operatorIsInfixJs @operator
      binaryOperatorToSourceNodeArray
        @operator
        @left.toSourceNode  commonSubToSourceNodeProps
        @right.toSourceNode commonSubToSourceNodeProps
        @left

    else
      parentOperatorPrecidence = getOpPrecidence @operator
      binaryOperatorToSourceNodeArray
        @operator
        @left.toSourceNode  merge commonSubToSourceNodeProps, {} subExpression: true isLeftOperand: true  parentOperatorPrecidence
        @right.toSourceNode merge commonSubToSourceNodeProps, {} subExpression: true isLeftOperand: false parentOperatorPrecidence
        @left

    if options && @_needsParens options
      @createSourceNode  "(", out, ")"
    else
      @createSourceNode out

  ###############
    PRIVATE

  _needsParens: (toJsOptions) ->
    {dotBase, parentOperatorPrecidence, isLeftOperand} = toJsOptions if toJsOptions

    unless parentOperatorPrecidence?
      dotBase
    else
      operatorPrecidence = getOpPrecidence @operator
      if parentOperatorPrecidence && operatorPrecidence < parentOperatorPrecidence
        false
      else if parentOperatorPrecidence && operatorPrecidence == parentOperatorPrecidence && isLeftOperand == getPrecidenceLevelIsLeftAssociative operatorPrecidence
        false
      else
        true
