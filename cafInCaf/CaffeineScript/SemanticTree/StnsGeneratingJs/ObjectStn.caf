import &StandardImport

StnRegistry = &StnRegistry

class ObjectStn extends &BaseStn

  @getter
    isEmptyObjectLiteral: -> !@children || @children.length == 0

  toSourceNode: (options) ->
    base = []
      "{"
      @childrenToSourceNodes ', ', expression: true
      "}"

    if options?.dotBase || options?.statement
      @createSourceNode
        "("
        base
        ")"
    else @createSourceNode base

  ##
    TODO: sometimes this should merge with a parent implicit array OR
    a parent argument list

  splitObjectsAtSameProps = (children) ->
    currentDefined = {}
    listOfObjectLiterals = [currentOrder = []]

    each child in children
      if found = child.find /ObjectPropNameStn/
        [{props:{value}}] = found
        if currentDefined[value]
          currentDefined = {}
          listOfObjectLiterals.push currentOrder = []
        currentDefined[value] = true
      currentOrder.push child

    listOfObjectLiterals

  @newInstance: (props, children) ->
    listOfObjectLiterals = splitObjectsAtSameProps children

    if listOfObjectLiterals.length == 1
      new @ props, children
    else
      new StnRegistry.ArrayStn
        array c in listOfObjectLiterals
          new @ props, c