import &StandardImport

###
  Refactor strategy:

  don't overrid updateScope

  instead, in toJs, we traverse the scope sub-tree:
    importMap = {}
    for each child-scope when child isnt ImportStn
      mergeInto importMap, @identifiersUsedButNotAssigned


class ImportStn extends &BaseStn

  # jsExpressionUsesReturn: true

  @getter
    nonImportScope: ->
      {scope} = @
      {scope} = scope while scope.type == "Import"
      # {scope} = scope while scope.class == ImportStn
      scope

    importFromCaptureIdentifier: ->
      @_importFromCaptureIdentifier ||= @nonImportScope.bindUniqueIdentifier "parentImports"

  toJs: (options = {})->
    importFromCaptureIdentifier = null
    if p = @findParent /^Import$/
      {importFromCaptureIdentifier} = p
      true

    {importBody} = @labeledChildren
    importFromList = arrayWithoutLast @children

    if importBody
      identifiersToImport = Object.keys importBody.generateImportMap()

      # needs to be called first since it might cause @_importFromCaptureIdentifier to be set
      bodyJs =
        compactFlatten []
          importBody.getAutoLets()
          importBody.toFunctionBodyJs true
        .join '; '

      if identifiersToImport.length > 0


        importsJs = compactFlatten []
          importFromCaptureIdentifier || "global"
          array c in importFromList with c.toJsExpression()

        ""
          Caf.importInvoke(["#{identifiersToImport.join '", "'}"],
          #{if @_importFromCaptureIdentifier then "#{@_importFromCaptureIdentifier} = " else ''}[#{importsJs.join ', '}],
          (#{identifiersToImport.join ', '}) => {#{bodyJs};})

      else
        "" (() => {#{bodyJs};})()
    else
      "undefined"

  @getter
    parentImport: ->
      @findParent /^Import$/

  toSourceNode: (options = {})->
    importFromCaptureIdentifier = null
    if p = @parentImport
      {importFromCaptureIdentifier} = p
      true

    {importBody} = @labeledChildren
    importFromList = arrayWithoutLast @children

    if importBody
      identifiersToImport = Object.keys importBody.generateImportMap()

      # needs to be called first since it might cause @_importFromCaptureIdentifier to be set
      bodySourceNodes =
        []
          importBody.getAutoLets()
          importBody.toSourceNode returnAction: true

      if identifiersToImport.length > 0

        importsSourceNodes = compactFlatten []
          importFromCaptureIdentifier || :global
          ", "
          @stnArrayToSourceNodes importFromList, ", "

        @createSourceNode
          "" Caf.importInvoke(["
          identifiersToImport.join '", "'
          '"], '
          if @_importFromCaptureIdentifier then
            [] @_importFromCaptureIdentifier, " = "
          "" [
          importsSourceNodes
          "" ], (
          identifiersToImport.join ', '
          "" ) => {
          bodySourceNodes
          "" })

      else
        @createSourceNode
          @doSourceNode bodySourceNodes
    else
      "undefined"
