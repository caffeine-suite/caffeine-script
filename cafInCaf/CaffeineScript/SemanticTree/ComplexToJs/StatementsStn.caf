import &StandardImport, &Lib

class StatementsStn extends &BaseStn

  needsParens: false

  toSourceNode: (options)->
    {returnAction, generateStatements, expression} = options if options
    generateStatements ?= expression ? true

    @createSourceNode
      if expression
        switch @children.length
        when 0 then !generateStatements && "undefined"
        when 1 then @children[0].toSourceNode options
        else
          []
            "("
            @_getChildrenSourceNodes null, false
            ")"
      else
        @_getChildrenSourceNodes returnAction, generateStatements

  toJs: (options)->
    if options?.expression
      switch @children.length
      when 0 then "undefined"
      when 1 then @children[0].toJsExpression()
      else
        @applyRequiredParens
          @_getChildrenStatementsJsArray "", false
          .join ", "
    else
      @_getChildrenStatementsJsArray().join "; "

  toFunctionBodyJs: (returnAction = true)->
    @toFunctionBodyJsArray returnAction
    .join "; "

  toFunctionBodyJsArray: (returnAction = true)->
    @_getChildrenStatementsJsArray returnAction

  ###########
    PRIVATE
  _getChildrenStatementsJsArray: (returnAction, generateStatements = true)->
    returnAction = switch returnAction
    when true then returnAction = :return
    when false then null
    else returnAction

    array c, i in lines = @children
      if returnAction? && i == lines.length - 1
        if !c.jsExpressionUsesReturn
          if returnAction.length > 0
            "#{returnAction} #{c.toJsExpression()}"
          else
            c.toJsExpression()
        else c.toJs generateReturnStatement: true

      else
        if generateStatements
          statement = c.toJs statement: true
          if statement.match /^function/
            @applyRequiredParens statement
          else
            statement
        else
          c.toJsExpression returnValueIsIgnored: true

  _getChildrenSourceNodes: (returnAction, generateStatements = true)->
    returnAction = switch returnAction
      when true then returnAction = :return
      when false then null
      else returnAction

    array c, i in lines = @children into out = []
      out.push "; " if i>0
      if returnAction? && i == lines.length - 1
        if !c.jsExpressionUsesReturn
          childExpression = c.toSourceNode expression: true
          if returnAction.length > 0
            [] returnAction, " ", childExpression
          else
            childExpression
        else c.toJs generateReturnStatement: true

      else
        if generateStatements
          c.toSourceNode statement: true
        else
          c.toSourceNode expression: true, returnValueIsIgnored: true
    out.push ";"
    out
