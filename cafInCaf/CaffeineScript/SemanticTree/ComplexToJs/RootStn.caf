import &StandardImport

StatementsStn = &StatementsStn

class RootStn extends &ScopeStnMixin &BaseStn
  constructor: (props, children) ->
    super
    @_scopeHasBeenUpdated = false
    @statements = children[0]

  isImports: true

  @getter
    statementsSourceNodes: ->
      @statements.toSourceNode()

  toSourceNode: (options = {})->
    @rootUpdateScope()
    @newSourceNode.add if options.bare
      compactFlatten []
        @getBareInitializers()
        @statementsSourceNodes
    else if options.module
      identifiersToImport = array v, k in @generateImportMap() with "#{k} = global.#{k}"
      lets = compactFlatten [] identifiersToImport, @requiredIdentifierLets

      []
        """
          "use strict"
          let Caf = require('caffeine-script-runtime');
          Caf.defMod(module, () => {

        "let #{lets.join ', '}; " if lets.length > 0
        @statementsSourceNodes

        """
          };});
    else
      compactFlatten []
        if present autoLets = @getAutoLets()
          [] autoLets, "; "
        @statementsSourceNodes

  rootUpdateScope: ->
    unless @_scopeHasBeenUpdated
      @_scopeHasBeenUpdated = true
      @updateScope @

  toJsModule: ->
    @rootUpdateScope()
    identifiersToImport = array v, k in @generateImportMap() with "#{k} = global.#{k}"

    statementsJs = @statements.toFunctionBodyJs()

    lets = compactFlatten [] identifiersToImport, @requiredIdentifierLets
    statements = compactFlatten []
      "let #{lets.join ', '}" if lets.length > 0
      statementsJs

    """
      "use strict"
      let Caf = require('caffeine-script-runtime');
      Caf.defMod(module, () => {#{statements.join '; '};});

  toJs: ->
    @rootUpdateScope()
    statements = @statements.toJs()
    compactFlatten []
      @getAutoLets()
      statements
    .join '; '
    + ";"

  toBareJs: ->
    @rootUpdateScope()
    statements = @statements.toJs()
    compactFlatten []
      "" Caf = global.Caf || require('caffeine-script-runtime')
      @getBareInitializers()
      statements
    .join ';\n'
    + ";"
