import &StandardImport

class UnaryOperatorStn extends &BaseStn

  @getter
    normalizedOperand: ->
      switch op = @props.operand
        when "delete" then "delete "
        when "and" then "&&"
        when "or"  then "||"
        when "==", "is"   then "==="
        when "!=", "isnt" then "!=="
        when "not" then "!"
        when "?" then " != null"
        else op

  @getter
    tail: -> @props.tail || @props.operand == "?"

  needsParens: false
  toJs: ->
    childrenJs = @applyParens @children[0].toJsExpression()
    if @props.operand == "?"
      "#{childrenJs} != null"
    else if @props.tail
      "#{childrenJs}#{@normalizedOperand}"
    else
      "#{@normalizedOperand}#{childrenJs}"

  toSourceNode: (options) ->
    childNode = @children[0].toSourceNode dotBase: true

    base = if @tail
      childNode, @normalizedOperand
    else
      @normalizedOperand, childNode

    if options?.dotBase
      @createSourceNode "(", base, ")"

    else
      @createSourceNode base