import &StandardImport, &OperatorHelper

class BinaryOperatorStn extends &BaseStn

  constructor: (props, children) ->
    super
    @operator = props.operator
    @left = children[0]
    @right = children[1]
    throw new Error "left and right required: #{formattedInspect left: @left, right: @right}" unless @left && @right

  updateScope: (@scope) ->
    if @operator == "?" && !@left.isReference
      @uniqueIdentifierHandle = @scope.uniqueIdentifierHandle
    super

  toSourceNode: (options)->
    out = switch
    when @operator == "?" && @uniqueIdentifierHandle
      {identifier} = @uniqueIdentifierHandle

      []
        "(("
        identifier
        " = "
        @left.toSourceNode expression: true
        ") != null ? "
        identifier
        " : "
        @right.toSourceNode expression: true
        ")"

    when !operatorIsInfixJs @operator
      binaryOperatorToSourceNodeArray
        @operator
        @left.toSourceNode expression: true
        @right.toSourceNode expression: true
        @left

    else
      parentOperatorPrecidence = getOpPrecidence @operator
      binaryOperatorToSourceNodeArray
        @operator
        @left.toSourceNode  {} expression: true subExpression: true parentOperatorPrecidence, isLeftOperand: true
        @right.toSourceNode {} expression: true subExpression: true parentOperatorPrecidence, isLeftOperand: false
        @left

    @createSourceNode if options && @_needsParens options
      compactFlatten [] "(", out, ")"
    else
      out

  toJs: (options)->
    out = if @operator == "?" && @uniqueIdentifierHandle
      {identifier} = @uniqueIdentifierHandle
      "((#{identifier} = #{@left.toJsExpression()}) != null ? #{identifier} : #{@right.toJsExpression()})"

    else if !operatorIsInfixJs @operator
      binaryOperatorToJs
        @operator
        @left.toJsExpression()
        @right.toJsExpression()

    else
      parentOperatorPrecidence = getOpPrecidence @operator
      binaryOperatorToJs
        @operator
        @left.toJs  {} expression: true subExpression: true parentOperatorPrecidence, isLeftOperand: true
        @right.toJs {} expression: true subExpression: true parentOperatorPrecidence, isLeftOperand: false

    if options
      # {parentOperatorPrecidence, isLeftOperand, dotBase} = options
      if @_needsParens options
        "(#{out})"
      else
        out
    else
      out

  ###############
    PRIVATE

  _needsParens: (toJsOptions) ->
    {dotBase, parentOperatorPrecidence, isLeftOperand} = toJsOptions if toJsOptions

    unless parentOperatorPrecidence?
      dotBase
    else
      operatorPrecidence = getOpPrecidence @operator
      if parentOperatorPrecidence && operatorPrecidence < parentOperatorPrecidence
        false
      else if parentOperatorPrecidence && operatorPrecidence == parentOperatorPrecidence && isLeftOperand == getPrecidenceLevelIsLeftAssociative operatorPrecidence
        false
      else
        true
