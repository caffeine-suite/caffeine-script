## import &StandardImport

  class ObjectPropValueStn extends &BaseStn

    @getter isObject: true

    toJs: ->
      [prop, value] = @children
      "#{prop.toJs()}: #{value.toJsExpression()}"

import &StandardImport

##
  props:
    propertyName: string (optional)

class ObjectPropValueStn extends &BaseStn

  @getter
    isObject: true
    propNameChild: -> @children[0]
    valueChild: -> peek @children

    isThisProp: -> @children[0]?.isThisProp

    propName: ->
      switch @children.length
      when 2
        [propNameStn] = @children
        propNameStn?.simpleName ? propNameStn

      when 1
        structuringStn = @children[0]

        switch structuringStn.type
          when :Accessor
            structuringStn.key.toJs()
          when :Require
            structuringStn.rawRequireString
          when :This
            structuringStn.children[0].toJs()
          when :SimpleLiteral, :Reference, :Identifier
            structuringStn.toJs()
          else
            throw new Error "When structuring an object, only Accessors, &requires and identifiers are allowed. (#{structuringStn.type} not allowed)"

    canUseES6Structuring: ->
      (same = @propNameChild == @valueChild)
      || propName = @propNameChild.simpleName
      && switch @valueChild.type
        when :SimpleLiteral, :Reference, :Identifier
          !javaScriptReservedWords[valueChildString = @valueChild.toJs()]
          && identifierRegexp.test valueChildString
          && same || valueChildString == propName

  toJs: ->
    {valueChild, propName} = @
    base = @valueChild.toJsExpression()

    unless isString propName
      propName = propName.toJs()

    if @canUseES6Structuring
      base
    else
      "#{propName}: #{base}"

  validate: ->
    throw new Error "no prop name" unless present @propName

  toSourceNode: ->
    {valueChild, propName} = @
    base = valueChild.toSourceNode()
    propName = propName.toSourceNode() unless isString propName

    if @canUseES6Structuring
      base
    else
      @createSourceNode
        propName
        ": "
        base
