import &StandardImport, &CaffeineEight, &StnRegistry
import Extensions

->
  @rule
    object:
      :implicitObject
      :explicitObject

    objectLiteralBlock: IndentBlocks.getPropsToSubparseToEolAndBlock
      rule: :explicitObjectBlock

    explicitObjectBlock:
      ""
        end*
        singleOrMultilineExplicitObject
        end*

    singleOrMultilineExplicitObject:
      :multilineExplicitObject
      :oneLineExplicitObject

  @rule

    implicitObject:
      "props:propertyList"

    oneLineExplicitObject:
      "props:explicitPropertyList"

    explicitObject:
      "'{}' _? props:explicitPropertyList"
      "'{}' _? props:objectLiteralBlock"
      "'{}'"

    bracketedObject: "openCurly_ props:explicitPropertyList _closeCurly"

    multilineImplicitObject:
      pattern:
        ""
          !implicitObjectWithTwoOrMorePropsOnOneLine
          valuePropWithComplexExpression
          multilineImplicitObjectExtension+

    multilineExplicitObject:
      pattern:
        ""
          !implicitObjectWithTwoOrMorePropsOnOneLine
          explicitValuePropWithComplexExpression
          multilineExplicitObjectExtension+"

    {}
      getStn: ~>
        children = array m in @getMatchStns()
          if m instanceof ObjectStn.class
            m.children
          else
            m

        ObjectStn children

  @rule
    multilineImplicitObjectExtension:
      "end+ !implicitObjectWithTwoOrMorePropsOnOneLine valuePropWithComplexExpression"

    multilineExplicitObjectExtension:
      "end+ !implicitObjectWithTwoOrMorePropsOnOneLine explicitValuePropWithComplexExpression"

    implicitObjectWithTwoOrMorePropsOnOneLine:
      "literalProp _ propertyList"
      "valueProp _comma_ propertyList"

    explicitPropertyList:
      "valueProp _comma_ explicitPropertyList"
      "literalProp _ explicitPropertyList"
      "structurableProp _comma_ explicitPropertyList"
      "explicitValuePropWithComplexExpression"

    propertyList:
      "valueProp _comma_ propertyList"
      "literalProp _ propertyList"
      "valuePropWithComplexExpression"

  @rule
    literalProp:  "propName _colon_ propValue:literal"
    valueProp:    "propName _colon_ propValue:expression"

    valuePropWithComplexExpression:
      "propName _colon_ propValue:requiredValue"

    {}
      name: "literalObjectProperty"
      stnFactory: :ObjectPropValueStn

  @rule
    explicitValuePropWithComplexExpression:
      :valuePropWithComplexExpression
      :structurableProp

    structurableProp:
      :expression
      stnFactory: :ObjectPropValueStn

  @rule
    propName: "computedPropName"
    computedPropName:
      pattern: "openBracket_ expression _closeBracket"
      stnFactory: "ObjectLiteralAccessorStn"

  @rule
    stringLiteralPropNameTail: [
      "_ /:/ !unquotedString"
      "/:/"
    ]

  @rule
    thisPropName: "/@/ unquotedString?"
    {}
      stnFactory: :ThisStn
      stnProps: ~> identifier: @unquotedString.toString()

  @rule
    propName:
      "!/then\\s/ str:thisPropName &_colon_"
    {}
      stnFactory: "ObjectPropNameStn"
      stnProps: ~>
        isThisProp: true

  @rule
    propName:
      "!/then\\s/ str:identifier &_colon_"
      "!/then\\s/ str:unquotedString &/:/"
      "quotedString:stringLiteral &stringLiteralPropNameTail"

    {}
      stnFactory: "ObjectPropNameStn"
      stnProps: ~>
        value: @str?.toString()
        isThisProp: false
