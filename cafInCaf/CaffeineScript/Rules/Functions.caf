import &StandardImport, &CaffeineEight

functionDefinition:
  "args:argsDefinition? _arrow _? body:functionDefinitionBodyBlock?"
  stnFactory: :FunctionDefinitionStn
  stnProps: ~>
    bound: switch @_arrow.text.match(/(=>|~>|->)/)[0]
      when :=> then true
      when :~> then false
      when :-> then :auto
      else throw new Error

functionDefinitionBodyBlock:
  Extensions.IndentBlocks.getPropsToSubparseToEolAndBlock()
  Extensions.IndentBlocks.getPropsToSubparseToEol allowPartialMatch: true

argsDefinition:
  "openParen_ argDefList? _closeParen"
  stnFactory: :FunctionDefinitionArgsStn

argDefList:
  "argDef _comma_optionalNewLine argDefList"
  "argDef _ argDefList"
  "argDef"

argDef:
  "at:/@/? target:identifier argIdentifierExtension?"
  "target:destructuringTarget argIdentifierExtension?"
  stnFactory: "FunctionDefinitionArgStn"
  stnProps:   ~> rest: !!@argIdentifierExtension?.ellipsis, assignThisProperty: !!@at

argIdentifierExtension:
  :defaultValue
  :ellipsis

defaultValue:
  pattern: "_equals_ expression"

superFunctionInvocation:
  "openParen_ simpleValueList? _closeParen"
  "_? valueList"

functionInvocationExtension:
  "existanceTest:questionMark? openParen_ values:simpleValueList? _closeParen"
  "existanceTest:questionMark? !/[-+]/ _? values:valueList"
  stnFactory:   "FunctionInvocationStn"
  stnExtension: true
  stnProps:     ~> existanceTest: !!@existanceTest
  stnChildren:  ~> @values?.getStn()
