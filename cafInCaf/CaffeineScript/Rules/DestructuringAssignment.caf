import &StandardImport

->
  @rule
    destructuringAssignment: "structure:destructuringTarget _? '=' _? value:singleValueOrImplicitArray"
    {} stnFactory: :DestructuringAssignmentStn

  @rule
    destructuringTarget:
      :objectDestructuring
      :arrayDestructuring

  @rule
    objectDestructuring: "'{' _? objectDestructuringList _? '}'"
    {} stnFactory: "ObjectDestructuringStn"

  @rule
    arrayDestructuring: "'[' _? arrayDestructuringList _? ']'"
    {} stnFactory: :ArrayDestructuringStn

  @rule
    arrayDestructuringList:
      {} pattern: "element:arrayDestructuringElement _comma_optionalNewLine arrayDestructuringList"
      {} pattern: "element:arrayDestructuringElement"

    arrayDestructuringElement:
      :arrayDestructuringIdentifier
      :destructuringTarget

  @rule
    objectDestructuringList:
      {} pattern: "element:objectDestructuringElement _comma_optionalNewLine objectDestructuringList"
      {} pattern: "element:objectDestructuringElement"

    objectDestructuringElement:
      :labeledDestructuringTarget
      :destructuringIdentifier

  @rule
    labeledDestructuringTarget: "identifier _? ':' _? arrayDestructuringElement"
    {} stnFactory: :LabeledDestructuringTargetStn

  @rule
    arrayDestructuringIdentifier:
      {} pattern: "identifier _? ellipsis"
      {} pattern: "identifier destructuringDefault:destructuringDefault?"
    {}
      stnFactory: "DestructuringIdentifierStn"
      stnProps: ~> ellipsis: !!@ellipsis

  @rule
    destructuringIdentifier: "identifier destructuringDefault:destructuringDefault?" # objectDestructuring arrayDestructuring implicitObjectDestructuring"
    {} stnFactory: :DestructuringIdentifierStn

  @rule
    destructuringDefault: "_? '=' _? expression"