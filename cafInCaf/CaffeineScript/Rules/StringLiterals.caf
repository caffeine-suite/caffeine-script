import &StandardImport, &CaffeineEight, &StnRegistry, &Lib

wordStringChar = /// [^\n\s,)\]\}]
blockStringStartChar = /// (\  | \n | [^.\n\s,)\]\}] )

->
  @rule
    doubleQuote:            /"/
    singleQuote:            /'/

    interpolationStart:     /\#\{/
    interpolationEnd:       /\}/

    # https://mathiasbynens.be/notes/javascript-escapes
    dqStringMiddle:         /// ( [^"\\#]    | \u[0-9a-f]{4} | \u\{[0-9a-f]+\} | \x[0-9a-f]{2} | \\(?:[1-7][0-7]{0,2}|[0-7]{2,3}) | \\. | \#(?!\{) )*
    sqStringMiddle:         /// ( [^'\\#]    | \u[0-9a-f]{4} | \u\{[0-9a-f]+\} | \x[0-9a-f]{2} | \\(?:[1-7][0-7]{0,2}|[0-7]{2,3}) | \\. | \#(?!\{) )*
    blockStringMiddle:      /// ( [^\\#]     | \u[0-9a-f]{4} | \u\{[0-9a-f]+\} | \x[0-9a-f]{2} | \\(?:[1-7][0-7]{0,2}|[0-7]{2,3}) | \\. | \#(?!\{) )*

  @rule
    stringLiteral:
      {}
        pattern: "" /""/ tripple:/"/? &/#{blockStringStartChar.source}/ stringBlock
        getStn: ~>
          ret = @stringBlock.getStn()
          unless @tripple
            ret.compactNewLines?()
            ret.trimLeft?()

          ret.trimRight?()
          ret

      {}
        pattern: "" /''/ tripple:/'/? &/ +[^ \\n]| *\\n/ unparsedBlock
        getStn: ~>
          ret = StringStn parseTreeNode: @, value: @unparsedBlock.toString()
          ret.compactNewLines() unless @tripple
          ret

      ## word-strings
        :unquoted strings
        : is omitted
        reserved: '::' for a future word-string-block
        reserved: backslashes are currently excluded until I decide
          if they should be escaped or
          if we should support escapes
          Could be interesting: :foo\sbar could == "foo bar"
      {}
        pattern: /// :(?!:) #{wordStringChar.source}+
        getStn: ~> StringStn parseTreeNode: @, value: @toString().slice 1

      ## hashtag-strings
        #hashtag and color (#fff) strings
        The # is preserved
      {}
        pattern: /#[$\w\u007f-\uffff]+/
        getStn: ~> StringStn parseTreeNode: @, value: @toString()

      # number-with-unit strings
      {}
        pattern:
          ///
            [-+]?
            (?!00)
            [0-9]*
            \.?
            [0-9]+
            ([eE][-+]?[0-9]+)?

            # followed by one or more identifier characters
            [$\w\u007f-\uffff]+

        getStn: ~> StringStn parseTreeNode: @, value: @toString()

    stringBlock: Extensions.IndentBlocks.getPropsToSubparseToEolAndBlock rule: "stringBlockBody"

  @rule
    stringLiteral:
      "bracketStart:doubleQuote mid:dqStringMiddle interpolation:dqStringInterpolation? doubleQuote"
      "bracketStart:singleQuote mid:sqStringMiddle interpolation:sqStringInterpolation? singleQuote"

    stringBlockBody: "/ *\n/? mid:blockStringMiddle interpolation:blockStringInterpolation?"

    {}
      getStnChildren: (appendTo = [])~>
        appendTo.push StringStn parseTreeNode: @, value: @mid.toString() if @mid.matchLength > 0
        @interpolation?.getStnChildren appendTo
        appendTo

      getStn: ~>
        ret = if @interpolation
          InterpolatedStringStn @getStnChildren()
        else
          StringStn parseTreeNode: @, value: @mid.toString()

        if @bracketStart
          ret.compactNewLines true, true
        ret

  @rule
    interpolation:
      "interpolationStart expression interpolationEnd"
      "interpolationStart expression:requiredValue _end? interpolationEnd"

  @rule
    dqStringInterpolation:    "interpolation mid:dqStringMiddle interpolationContinues:dqStringInterpolation?"
    sqStringInterpolation:    "interpolation mid:sqStringMiddle interpolationContinues:sqStringInterpolation?"
    blockStringInterpolation: "interpolation mid:blockStringMiddle interpolationContinues:blockStringInterpolation?"
    {}
      getStnChildren: (appendTo = [])~>
        appendTo.push @interpolation.expression.getStn()
        appendTo.push StringStn parseTreeNode: @, value: @mid.toString() if @mid.matchLength > 0
        @interpolationContinues?.getStnChildren appendTo
        appendTo
