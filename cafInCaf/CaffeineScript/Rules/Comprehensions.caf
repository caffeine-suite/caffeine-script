import &StandardImport

->
  @rule
    withOrDo: /(with|do)\b/
    comprehensionValueClauseType: /(from|in|into|returning|when|with|with-key|to|by|til|do)\b(?!-)/

  @rule
    comprehensionOutputType:      /(object|array|reduce|each|find)\b/
    comprehensionIterationType:   /(from|in|to|til)\b/
    {} stnFactory: :SemanticTokenStn

  @rule
    comprehensionValueClause:
      ""
        _?
        comprehensionValueClauseType
        _?
        value:keywordLabeledStatementsWithOneLessBlock
      stnFactory: :ComprehensionValueClauseStn
      stnProps: ~>
        type: @comprehensionValueClauseType.toString()

    comprehensionValueClauses: "comprehensionValueClause+"

    # expressionWithOneLessBlockOrBlock:
    #   :expressionWithOneLessBlock
    #   :requiredValue

  @rule
    comprehensionVariableDef_: '!comprehensionIterationType argDef optionalArg? _ &comprehensionIterationType'
    {} stnFactory: :FunctionDefinitionArgsStn

  @rule
    optionalArg: "_comma_ !withOrDo argDef"

    comprehensionIterationTypeClause_: 'comprehensionIterationType _?'
    unlabeledFromClause: "keywordLabeledStatementsWithOneLessBlock"
    # comprehensionWith: '_? withOrDo _? lineOfStatementsOrBlock'
    comprehensionBody: :block # :comprehensionWith

  @rule
    comprehension: "
      outputType:comprehensionOutputType _
      variableDefinition:comprehensionVariableDef_?

      iterable:unlabeledFromClause?

      valueClause:comprehensionValueClause*
      body:comprehensionBody?
      "
    {} stnFactory: :ComprehensionStn
