import &StandardImport, &CaffeineEight

controlStatement:
  {}
    stnFactory: :ControlOperatorStn
    pattern:
      "ifUnless _ expression:expressionWithOneLessBlock body:block  elseBody:elseClause?"
      "ifUnless _ expression:expressionWithOneLessBlock body:block? elseBody:elseClause"
      "ifUnless _ expression:expression                 thenClause  elseBody:elseClause?"
    stnProps: ~> operand:    @ifUnless.toString()

  {}
    stnFactory: :WhileStn
    pattern:
      "whileUntil _ expression:expressionWithOneLessBlock body:block  elseBody:elseClause?"
      "whileUntil _ expression:expressionWithOneLessBlock body:block? elseBody:elseClause"
      "whileUntil _ expression:expression                 thenClause  elseBody:elseClause?"
    stnProps: ~> operand:    @whileUntil.toString()

  {}
    stnFactory: :TryStn
    pattern: "try _? body:lineOfStatementsOrBlock optionalCatch:catchClause?"

  {}
    stnFactory: :DoStn
    pattern: "/do/ _ functionDefinition"

  {}
    stnFactory: :SwitchStn
    pattern:
      "/switch/ _ condition:expressionWithOneLessBlock? _? switchBodyBlock"
      "/switch/ _ condition:expression? switchBody"
      "/switch/ switchBodyBlock"
      "/switch/ switchBody"

catchClause:
  "controlStructorClauseJoiner catch _? errorIdentifier:identifier? body:lineOfStatementsOrBlock?"
  stnFactory: :CatchStn

switchBody: "switchWhen:switchWhenClause* switchElse:elseClause?"

switchBodyBlock:  Extensions.IndentBlocks.getPropsToSubparseBlock rule: :switchBodyBlockRule
switchBodyBlockRule: "" :switchBody end?

switchWhenClause:
  "end? when _ whenValue:expressionWithOneLessBlock thenDo:block"
  "end? when _ whenValue:implicitArrayOrExpression  thenDo:thenClause"
  stnFactory: :SwitchWhenStn

thenClause: "controlStructorClauseJoiner thenDo _? body:lineOfStatementsOrBlock?"
elseClause: "controlStructorClauseJoiner else   _? lineOfStatementsOrBlock?"

controlStructorClauseJoiner: "" _? end?

catch:      /catch\b/
try:        /try\b/
whileUntil: /(while|until)\b/
ifUnless:   /(if|unless)\b/
thenDo:     /(then|do)\b/
when:       /when\b/
else:       /else\b/
