import &StandardImport, &CaffeineEight, &StnRegistry

StnRegistry = &StnRegistry

##
  Eventualy I want all AstNodes to respond to:

  initially we should do:
    toJsExpression - no need for parens because it is either inside brackets already or the end of an expression.
    toStatement - no return-value needed; generate the nicest JS you can.

  eventually we should also do:
    toJsExpressionInList - add parens if a following comma would confusing things
    toJsExpression(operatorBefore, operatorAfter) - add parens if needed to ensure operator precidence


class CafParseNodeBaseClass extends Nodes.Node

  @_createSubclassBase: ->
    class NodeSubclass extends @

  getMatchStns: ->
    array m from @matches when m = m.getStn?()

  getStnFactory: ->
    StnRegistry.get @stnFactory

  getStnChildren: (left) ->
    if @stnChildren
      if isFunction @stnChildren
        @stnChildren()
      else
        @stnChildren
    else
      array m in @nonStnExtensionMatches when m = m.getStn left

  @getter
    isStnExtension:         -> @stnExtension || @presentMatches[0]?.isStnExtension
    stnExtensionMatches:    -> array m in @presentMatches when m.getStn && m.isStnExtension
    nonStnExtensionMatches: -> array m in @presentMatches when m.getStn && !m.isStnExtension

  getStn: (left) ->
    stn = if factory = @getStnFactory()
      factory
        parseTreeNode: @
        @stnProps?() || @stnProps
        left
        @getStnChildren()
    else
      x = @getStnChildren left

      if x.length == 1 then x[0] else if x.length == 0 then left else x

    each extension in @stnExtensionMatches
      stn = extension.getStn stn

    if stn?.props
      currentStnLabel = stn.props.label
      if !currentStnLabel || @label
        stn.props.label = @label || @ruleName
        stn.props.pluralLabel = @pluralLabel || @pluralRuleName

    if @isRoot
      RootStn stn, parseTreeNode: @
    else
      stn

  getTransformedSemanticTree: ->
    @getStn().transform()

  toJs: -> @getTransformedSemanticTree().toJs()
